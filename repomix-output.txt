This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-03T09:48:33.740Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  _redirects
  robots.txt
src/
  api/
    personnel.ts
    properties.ts
    workOrders.ts
  components/
    auth/
      LoginForm.tsx
      SignupForm.tsx
    maintenance/
      CreateWorkOrderModal.tsx
      WorkOrderCard.tsx
      WorkOrderModal.tsx
    personnel/
      AddPersonnelModal.tsx
      PersonnelCard.tsx
      PersonnelModal.tsx
    AddPropertyModal.tsx
    Analytics.tsx
    Dashboard.tsx
    ErrorBoundary.tsx
    Maintenance.tsx
    MaintenanceDistributionChart.tsx
    MaintenanceMode.tsx
    MaintenanceTable.tsx
    Personnel.tsx
    Properties.tsx
    PropertyModal.tsx
    PropertyTrendChart.tsx
    Reports.tsx
    Settings.tsx
    Sidebar.tsx
    StatCard.tsx
  contexts/
    AuthContext.tsx
  lib/
    firebase.ts
  middleware/
    auth.ts
    error.ts
    validation.ts
  types/
    personnel.ts
    property.ts
    workOrder.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
index.html
netlify.toml
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/_redirects
================
/* /index.html 200

================
File: public/robots.txt
================
User-agent: *
Allow: /

Sitemap: https://your-production-domain.com/sitemap.xml

================
File: src/api/personnel.ts
================
import { Personnel, PersonnelFormData } from '../types/personnel'
import { validateRequest, schemas } from '../middleware/validation'
import { ApiError } from '../middleware/error'

export const personnelApi = {
  getAll: async (): Promise<Personnel[]> => {
    const personnel = localStorage.getItem('personnel')
    return personnel ? JSON.parse(personnel) : []
  },

  getById: async (id: string): Promise<Personnel> => {
    const personnel = await personnelApi.getAll()
    const person = personnel.find(p => p.id === id)
    if (!person) {
      throw new ApiError(404, 'Personnel not found')
    }
    return person
  },

  create: async (data: PersonnelFormData): Promise<Personnel> => {
    // Validate request data
    validateRequest(schemas.personnel, data)

    const personnel = await personnelApi.getAll()
    const newPerson: Personnel = {
      id: crypto.randomUUID(),
      ...data,
      status: 'active',
      hireDate: new Date().toISOString().split('T')[0],
      activeWorkOrders: 0,
      completedWorkOrders: 0,
      rating: 0,
      availability: 'available'
    }

    personnel.push(newPerson)
    localStorage.setItem('personnel', JSON.stringify(personnel))
    return newPerson
  },

  update: async (id: string, data: Partial<Personnel>): Promise<Personnel> => {
    const personnel = await personnelApi.getAll()
    const index = personnel.findIndex(p => p.id === id)
    if (index === -1) {
      throw new ApiError(404, 'Personnel not found')
    }

    // Validate partial update data
    validateRequest(schemas.personnel.partial(), data)

    const updatedPerson = {
      ...personnel[index],
      ...data
    }

    personnel[index] = updatedPerson
    localStorage.setItem('personnel', JSON.stringify(personnel))
    return updatedPerson
  },

  updateStatus: async (id: string, status: Personnel['status']): Promise<Personnel> => {
    const personnel = await personnelApi.getAll()
    const index = personnel.findIndex(p => p.id === id)
    if (index === -1) {
      throw new ApiError(404, 'Personnel not found')
    }

    personnel[index].status = status
    localStorage.setItem('personnel', JSON.stringify(personnel))
    return personnel[index]
  },

  delete: async (id: string): Promise<void> => {
    const personnel = await personnelApi.getAll()
    const filteredPersonnel = personnel.filter(p => p.id !== id)
    if (filteredPersonnel.length === personnel.length) {
      throw new ApiError(404, 'Personnel not found')
    }
    localStorage.setItem('personnel', JSON.stringify(filteredPersonnel))
  }
}

================
File: src/api/properties.ts
================
import { Property, PropertyFormData } from '../types/property'
import { validateRequest, schemas } from '../middleware/validation'
import { ApiError } from '../middleware/error'

export const propertiesApi = {
  getAll: async (): Promise<Property[]> => {
    const properties = localStorage.getItem('properties')
    return properties ? JSON.parse(properties) : []
  },

  getById: async (id: string): Promise<Property> => {
    const properties = await propertiesApi.getAll()
    const property = properties.find(p => p.id === id)
    if (!property) {
      throw new ApiError(404, 'Property not found')
    }
    return property
  },

  create: async (data: PropertyFormData): Promise<Property> => {
    // Validate request data
    validateRequest(schemas.property, data)

    const properties = await propertiesApi.getAll()
    const newProperty: Property = {
      id: crypto.randomUUID(),
      ...data,
      maintenanceTasks: 0,
      warranties: 0,
      lastInspection: new Date().toISOString().split('T')[0],
      status: 'active',
      owner: {
        name: 'Default Owner',
        email: 'owner@example.com',
        phone: '(555) 000-0000',
        wallet: '0x0000000000000000000000000000000000000000'
      },
      maintenanceHistory: []
    }

    properties.push(newProperty)
    localStorage.setItem('properties', JSON.stringify(properties))
    return newProperty
  },

  update: async (id: string, data: Partial<PropertyFormData>): Promise<Property> => {
    const properties = await propertiesApi.getAll()
    const index = properties.findIndex(p => p.id === id)
    if (index === -1) {
      throw new ApiError(404, 'Property not found')
    }

    // Validate partial update data
    validateRequest(schemas.property.partial(), data)

    const updatedProperty = {
      ...properties[index],
      ...data
    }

    properties[index] = updatedProperty
    localStorage.setItem('properties', JSON.stringify(properties))
    return updatedProperty
  },

  delete: async (id: string): Promise<void> => {
    const properties = await propertiesApi.getAll()
    const filteredProperties = properties.filter(p => p.id !== id)
    if (filteredProperties.length === properties.length) {
      throw new ApiError(404, 'Property not found')
    }
    localStorage.setItem('properties', JSON.stringify(filteredProperties))
  }
}

================
File: src/api/workOrders.ts
================
import { WorkOrder, WorkOrderFormData, WorkOrderNote } from '../types/workOrder'
import { validateRequest, schemas } from '../middleware/validation'
import { ApiError } from '../middleware/error'

export const workOrdersApi = {
  getAll: async (): Promise<WorkOrder[]> => {
    const workOrders = localStorage.getItem('workOrders')
    return workOrders ? JSON.parse(workOrders) : []
  },

  getById: async (id: string): Promise<WorkOrder> => {
    const workOrders = await workOrdersApi.getAll()
    const workOrder = workOrders.find(wo => wo.id === id)
    if (!workOrder) {
      throw new ApiError(404, 'Work order not found')
    }
    return workOrder
  },

  create: async (data: WorkOrderFormData): Promise<WorkOrder> => {
    // Validate request data
    validateRequest(schemas.workOrder, data)

    const workOrders = await workOrdersApi.getAll()
    const newWorkOrder: WorkOrder = {
      id: crypto.randomUUID(),
      ...data,
      status: 'pending',
      createdAt: new Date().toISOString(),
      notes: [],
      attachments: []
    }

    workOrders.push(newWorkOrder)
    localStorage.setItem('workOrders', JSON.stringify(workOrders))
    return newWorkOrder
  },

  update: async (id: string, data: Partial<WorkOrder>): Promise<WorkOrder> => {
    const workOrders = await workOrdersApi.getAll()
    const index = workOrders.findIndex(wo => wo.id === id)
    if (index === -1) {
      throw new ApiError(404, 'Work order not found')
    }

    const updatedWorkOrder = {
      ...workOrders[index],
      ...data
    }

    workOrders[index] = updatedWorkOrder
    localStorage.setItem('workOrders', JSON.stringify(workOrders))
    return updatedWorkOrder
  },

  addNote: async (id: string, note: Omit<WorkOrderNote, 'id' | 'createdAt'>): Promise<WorkOrder> => {
    const workOrders = await workOrdersApi.getAll()
    const index = workOrders.findIndex(wo => wo.id === id)
    if (index === -1) {
      throw new ApiError(404, 'Work order not found')
    }

    const newNote: WorkOrderNote = {
      id: crypto.randomUUID(),
      ...note,
      createdAt: new Date().toISOString()
    }

    workOrders[index].notes.unshift(newNote)
    localStorage.setItem('workOrders', JSON.stringify(workOrders))
    return workOrders[index]
  },

  delete: async (id: string): Promise<void> => {
    const workOrders = await workOrdersApi.getAll()
    const filteredWorkOrders = workOrders.filter(wo => wo.id !== id)
    if (filteredWorkOrders.length === workOrders.length) {
      throw new ApiError(404, 'Work order not found')
    }
    localStorage.setItem('workOrders', JSON.stringify(filteredWorkOrders))
  }
}

================
File: src/components/auth/LoginForm.tsx
================
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import { Loader2 } from 'lucide-react'

const LoginForm = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const { login } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setLoading(true)

    try {
      await login(email, password)
      navigate('/')
    } catch (err) {
      setError('Failed to sign in')
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="glass p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6">Sign In</h2>

        {error && (
          <div className="glass p-4 bg-red-500/20 text-red-400 mb-4">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Email Address
            </label>
            <input
              type="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full glass p-2"
              placeholder="you@example.com"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Password
            </label>
            <input
              type="password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full glass p-2"
              placeholder="••••••••"
            />
          </div>

          <button
            type="submit"
            disabled={loading}
            className="w-full glass glass-hover p-2 bg-blue-500/20 disabled:opacity-50"
          >
            {loading ? (
              <div className="flex items-center justify-center gap-2">
                <Loader2 className="w-4 h-4 animate-spin" />
                Signing In...
              </div>
            ) : (
              'Sign In'
            )}
          </button>
        </form>
      </div>
    </div>
  )
}

export default LoginForm

================
File: src/components/auth/SignupForm.tsx
================
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import { Loader2 } from 'lucide-react'

const SignupForm = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const { signup } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setLoading(true)

    try {
      await signup(email, password)
      navigate('/')
    } catch (err) {
      setError('Failed to create an account')
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="glass p-8 w-full max-w-md mx-auto">
      <h2 className="text-2xl font-bold mb-6">Create Account</h2>

      {error && (
        <div className="glass p-4 bg-red-500/20 text-red-400 mb-4">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-1">
            Email Address
          </label>
          <input
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full glass p-2"
            placeholder="you@example.com"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">
            Password
          </label>
          <input
            type="password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full glass p-2"
            placeholder="••••••••"
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full glass glass-hover p-2 bg-blue-500/20 disabled:opacity-50"
        >
          {loading ? (
            <div className="flex items-center justify-center gap-2">
              <Loader2 className="w-4 h-4 animate-spin" />
              Creating Account...
            </div>
          ) : (
            'Sign Up'
          )}
        </button>
      </form>
    </div>
  )
}

export default SignupForm

================
File: src/components/maintenance/CreateWorkOrderModal.tsx
================
import { Fragment, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X, Loader2 } from 'lucide-react'
import { WorkOrderFormData, WorkOrderPriority } from '../../types/workOrder'

interface CreateWorkOrderModalProps {
  isOpen: boolean
  onClose: () => void
  onSubmit: (data: WorkOrderFormData) => Promise<void>
  properties: Array<{ id: string; address: string }>
}

const CATEGORIES = [
  'HVAC',
  'Plumbing',
  'Electrical',
  'Structural',
  'Appliance',
  'Landscaping',
  'General',
]

const PRIORITIES: { value: WorkOrderPriority; label: string; class: string }[] = [
  { value: 'low', label: 'Low', class: 'bg-gray-500/20 text-gray-400' },
  { value: 'medium', label: 'Medium', class: 'bg-blue-500/20 text-blue-400' },
  { value: 'high', label: 'High', class: 'bg-yellow-500/20 text-yellow-400' },
  { value: 'urgent', label: 'Urgent', class: 'bg-red-500/20 text-red-400' },
]

const CreateWorkOrderModal = ({ isOpen, onClose, onSubmit, properties }: CreateWorkOrderModalProps) => {
  const [isLoading, setIsLoading] = useState(false)
  const [formData, setFormData] = useState<WorkOrderFormData>({
    propertyId: '',
    title: '',
    description: '',
    priority: 'medium',
    dueDate: '',
    category: '',
    estimatedCost: undefined,
    assignedTo: '',
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    try {
      await onSubmit(formData)
      onClose()
      setFormData({
        propertyId: '',
        title: '',
        description: '',
        priority: 'medium',
        dueDate: '',
        category: '',
        estimatedCost: undefined,
        assignedTo: '',
      })
    } catch (error) {
      console.error('Error creating work order:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-2xl glass p-6 rounded-xl">
                <div className="flex justify-between items-center mb-6">
                  <Dialog.Title className="text-xl font-semibold">
                    Create Work Order
                  </Dialog.Title>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium mb-1">Property</label>
                    <select
                      required
                      value={formData.propertyId}
                      onChange={(e) => setFormData(prev => ({...prev, propertyId: e.target.value}))}
                      className="w-full glass p-2"
                    >
                      <option value="">Select a property</option>
                      {properties.map((property) => (
                        <option key={property.id} value={property.id}>
                          {property.address}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">Title</label>
                    <input
                      type="text"
                      required
                      value={formData.title}
                      onChange={(e) => setFormData(prev => ({...prev, title: e.target.value}))}
                      className="w-full glass p-2"
                      placeholder="Brief description of the issue"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">Description</label>
                    <textarea
                      required
                      value={formData.description}
                      onChange={(e) => setFormData(prev => ({...prev, description: e.target.value}))}
                      className="w-full glass p-2 min-h-[100px]"
                      placeholder="Detailed description of the maintenance required"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-1">Category</label>
                      <select
                        required
                        value={formData.category}
                        onChange={(e) => setFormData(prev => ({...prev, category: e.target.value}))}
                        className="w-full glass p-2"
                      >
                        <option value="">Select category</option>
                        {CATEGORIES.map((category) => (
                          <option key={category} value={category}>
                            {category}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-1">Priority</label>
                      <div className="flex gap-2">
                        {PRIORITIES.map((priority) => (
                          <button
                            key={priority.value}
                            type="button"
                            onClick={() => setFormData(prev => ({...prev, priority: priority.value}))}
                            className={`px-3 py-1 rounded-full ${priority.class} ${
                              formData.priority === priority.value ? 'ring-2 ring-white/50' : ''
                            }`}
                          >
                            {priority.label}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-1">Due Date</label>
                      <input
                        type="date"
                        required
                        value={formData.dueDate}
                        onChange={(e) => setFormData(prev => ({...prev, dueDate: e.target.value}))}
                        className="w-full glass p-2"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-1">Estimated Cost ($)</label>
                      <input
                        type="number"
                        value={formData.estimatedCost || ''}
                        onChange={(e) => setFormData(prev => ({...prev, estimatedCost: parseFloat(e.target.value) || undefined}))}
                        className="w-full glass p-2"
                        placeholder="0.00"
                        min="0"
                        step="0.01"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">Assign To</label>
                    <input
                      type="text"
                      value={formData.assignedTo || ''}
                      onChange={(e) => setFormData(prev => ({...prev, assignedTo: e.target.value}))}
                      className="w-full glass p-2"
                      placeholder="Contractor or staff member name"
                    />
                  </div>

                  <div className="flex justify-end gap-4 mt-6">
                    <button
                      type="button"
                      onClick={onClose}
                      className="glass glass-hover px-4 py-2"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="glass glass-hover px-4 py-2 bg-blue-500/20 disabled:opacity-50"
                    >
                      {isLoading ? (
                        <div className="flex items-center gap-2">
                          <Loader2 className="w-4 h-4 animate-spin" />
                          Creating...
                        </div>
                      ) : (
                        'Create Work Order'
                      )}
                    </button>
                  </div>
                </form>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default CreateWorkOrderModal

================
File: src/components/maintenance/WorkOrderCard.tsx
================
import { Clock, Calendar, DollarSign, User } from 'lucide-react'
import { WorkOrder } from '../../types/workOrder'

interface WorkOrderCardProps {
  workOrder: WorkOrder
  onClick: () => void
}

const getPriorityClass = (priority: WorkOrder['priority']) => {
  switch (priority) {
    case 'urgent':
      return 'bg-red-500/20 text-red-400'
    case 'high':
      return 'bg-yellow-500/20 text-yellow-400'
    case 'medium':
      return 'bg-blue-500/20 text-blue-400'
    case 'low':
      return 'bg-gray-500/20 text-gray-400'
  }
}

const getStatusClass = (status: WorkOrder['status']) => {
  switch (status) {
    case 'completed':
      return 'bg-green-500/20 text-green-400'
    case 'in-progress':
      return 'bg-blue-500/20 text-blue-400'
    case 'pending':
      return 'bg-yellow-500/20 text-yellow-400'
    case 'cancelled':
      return 'bg-red-500/20 text-red-400'
  }
}

const WorkOrderCard = ({ workOrder, onClick }: WorkOrderCardProps) => {
  return (
    <div 
      onClick={onClick}
      className="glass glass-hover p-4 cursor-pointer"
    >
      <div className="flex justify-between items-start mb-3">
        <div>
          <h3 className="font-medium">{workOrder.title}</h3>
          <p className="text-sm text-gray-400 mt-1">{workOrder.description}</p>
        </div>
        <div className="flex gap-2">
          <span className={`px-2 py-1 rounded-full text-xs ${getPriorityClass(workOrder.priority)}`}>
            {workOrder.priority}
          </span>
          <span className={`px-2 py-1 rounded-full text-xs ${getStatusClass(workOrder.status)}`}>
            {workOrder.status}
          </span>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4 text-sm text-gray-400">
        <div className="flex items-center gap-2">
          <Calendar className="w-4 h-4" />
          Due: {new Date(workOrder.dueDate).toLocaleDateString()}
        </div>
        <div className="flex items-center gap-2">
          <Clock className="w-4 h-4" />
          Created: {new Date(workOrder.createdAt).toLocaleDateString()}
        </div>
        {workOrder.estimatedCost && (
          <div className="flex items-center gap-2">
            <DollarSign className="w-4 h-4" />
            Est. Cost: ${workOrder.estimatedCost}
          </div>
        )}
        {workOrder.assignedTo && (
          <div className="flex items-center gap-2">
            <User className="w-4 h-4" />
            {workOrder.assignedTo}
          </div>
        )}
      </div>
    </div>
  )
}

export default WorkOrderCard

================
File: src/components/maintenance/WorkOrderModal.tsx
================
import { Fragment, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X, MessageSquare, Paperclip, Clock, Calendar, DollarSign, User, Building2 } from 'lucide-react'
import { WorkOrder, WorkOrderNote } from '../../types/workOrder'

interface WorkOrderModalProps {
  workOrder: WorkOrder
  isOpen: boolean
  onClose: () => void
  onStatusChange: (id: string, status: WorkOrder['status']) => void
  onAddNote: (id: string, note: Omit<WorkOrderNote, 'id' | 'createdAt'>) => void
  property: { id: string; address: string }
}

const WorkOrderModal = ({ 
  workOrder, 
  isOpen, 
  onClose, 
  onStatusChange,
  onAddNote,
  property
}: WorkOrderModalProps) => {
  const [newNote, setNewNote] = useState('')

  const handleAddNote = () => {
    if (!newNote.trim()) return
    onAddNote(workOrder.id, {
      content: newNote,
      createdBy: 'Current User' // In a real app, this would come from auth context
    })
    setNewNote('')
  }

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-2xl glass p-6 rounded-xl">
                <div className="flex justify-between items-start">
                  <Dialog.Title className="text-xl font-semibold">
                    Work Order Details
                  </Dialog.Title>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <div className="mt-6 space-y-6">
                  <div>
                    <h2 className="text-lg font-medium">{workOrder.title}</h2>
                    <p className="text-gray-400 mt-2">{workOrder.description}</p>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex items-center gap-3">
                      <Building2 className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="text-sm text-gray-400">Property</p>
                        <p>{property.address}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Calendar className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="text-sm text-gray-400">Due Date</p>
                        <p>{new Date(workOrder.dueDate).toLocaleDateString()}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Clock className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="text-sm text-gray-400">Created</p>
                        <p>{new Date(workOrder.createdAt).toLocaleDateString()}</p>
                      </div>
                    </div>
                    {workOrder.estimatedCost && (
                      <div className="flex items-center gap-3">
                        <DollarSign className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-400">Estimated Cost</p>
                          <p>${workOrder.estimatedCost}</p>
                        </div>
                      </div>
                    )}
                    {workOrder.assignedTo && (
                      <div className="flex items-center gap-3">
                        <User className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="text-sm text-gray-400">Assigned To</p>
                          <p>{workOrder.assignedTo}</p>
                        </div>
                      </div>
                    )}
                  </div>

                  <div>
                    <h3 className="font-medium mb-3">Status</h3>
                    <div className="flex gap-2">
                      {(['pending', 'in-progress', 'completed', 'cancelled'] as const).map((status) => (
                        <button
                          key={status}
                          onClick={() => onStatusChange(workOrder.id, status)}
                          className={`px-3 py-1 rounded-full text-sm ${
                            workOrder.status === status ? 'ring-2 ring-white/50' : ''
                          } ${
                            status === 'completed' ? 'bg-green-500/20 text-green-400' :
                            status === 'in-progress' ? 'bg-blue-500/20 text-blue-400' :
                            status === 'pending' ? 'bg-yellow-500/20 text-yellow-400' :
                            'bg-red-500/20 text-red-400'
                          }`}
                        >
                          {status}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h3 className="font-medium mb-3 flex items-center gap-2">
                      <MessageSquare className="w-5 h-5" />
                      Notes
                    </h3>
                    <div className="space-y-4">
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={newNote}
                          onChange={(e) => setNewNote(e.target.value)}
                          placeholder="Add a note..."
                          className="flex-1 glass p-2"
                        />
                        <button
                          onClick={handleAddNote}
                          disabled={!newNote.trim()}
                          className="glass glass-hover px-4 py-2 bg-blue-500/20 disabled:opacity-50"
                        >
                          Add
                        </button>
                      </div>
                      <div className="space-y-3 max-h-[200px] overflow-y-auto">
                        {workOrder.notes.map((note) => (
                          <div key={note.id} className="glass p-3">
                            <p>{note.content}</p>
                            <div className="flex justify-between items-center mt-2 text-sm text-gray-400">
                              <span>{note.createdBy}</span>
                              <span>{new Date(note.createdAt).toLocaleString()}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  {workOrder.attachments.length > 0 && (
                    <div>
                      <h3 className="font-medium mb-3 flex items-center gap-2">
                        <Paperclip className="w-5 h-5" />
                        Attachments
                      </h3>
                      <div className="grid grid-cols-2 gap-3">
                        {workOrder.attachments.map((attachment) => (
                          <a
                            key={attachment.id}
                            href={attachment.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="glass glass-hover p-3 flex items-center gap-3"
                          >
                            <Paperclip className="w-4 h-4" />
                            <div>
                              <p className="text-sm">{attachment.name}</p>
                              <p className="text-xs text-gray-400">{attachment.type}</p>
                            </div>
                          </a>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default WorkOrderModal

================
File: src/components/personnel/AddPersonnelModal.tsx
================
import { Fragment, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X } from 'lucide-react'
import { Personnel, PersonnelFormData, PersonnelSpecialty } from '../../types/personnel'

interface AddPersonnelModalProps {
  isOpen: boolean
  onClose: () => void
  onAdd: (personnel: Personnel) => Promise<void>
}

const SPECIALTIES: PersonnelSpecialty[] = [
  'HVAC',
  'Plumbing',
  'Electrical',
  'General Maintenance',
  'Landscaping',
  'Cleaning',
  'Carpentry',
]

const AddPersonnelModal = ({ isOpen, onClose, onAdd }: AddPersonnelModalProps) => {
  const [formData, setFormData] = useState<PersonnelFormData>({
    firstName: '',
    lastName: '',
    role: 'employee',
    email: '',
    phone: '',
    specialties: [],
    rate: 0,
  })
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    try {
      const newPerson: Personnel = {
        id: crypto.randomUUID(),
        ...formData,
        status: 'active',
        hireDate: new Date().toISOString().split('T')[0],
        activeWorkOrders: 0,
        completedWorkOrders: 0,
        rating: 0,
        availability: 'available',
      }
      await onAdd(newPerson)
      onClose()
      setFormData({
        firstName: '',
        lastName: '',
        role: 'employee',
        email: '',
        phone: '',
        specialties: [],
        rate: 0,
      })
    } catch (error) {
      console.error('Error adding personnel:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const toggleSpecialty = (specialty: PersonnelSpecialty) => {
    setFormData(prev => ({
      ...prev,
      specialties: prev.specialties.includes(specialty)
        ? prev.specialties.filter(s => s !== specialty)
        : [...prev.specialties, specialty]
    }))
  }

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md glass p-6 rounded-xl">
                <div className="flex justify-between items-center mb-4">
                  <Dialog.Title className="text-xl font-semibold">
                    Add Personnel
                  </Dialog.Title>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-1">
                        First Name
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.firstName}
                        onChange={(e) => setFormData(prev => ({...prev, firstName: e.target.value}))}
                        className="w-full glass p-2"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">
                        Last Name
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.lastName}
                        onChange={(e) => setFormData(prev => ({...prev, lastName: e.target.value}))}
                        className="w-full glass p-2"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Role
                    </label>
                    <select
                      required
                      value={formData.role}
                      onChange={(e) => setFormData(prev => ({...prev, role: e.target.value as Personnel['role']}))}
                      className="w-full glass p-2"
                    >
                      <option value="employee">Employee</option>
                      <option value="contractor">Contractor</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Email
                    </label>
                    <input
                      type="email"
                      required
                      value={formData.email}
                      onChange={(e) => setFormData(prev => ({...prev, email: e.target.value}))}
                      className="w-full glass p-2"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Phone
                    </label>
                    <input
                      type="tel"
                      required
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({...prev, phone: e.target.value}))}
                      className="w-full glass p-2"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Specialties
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {SPECIALTIES.map((specialty) => (
                        <button
                          key={specialty}
                          type="button"
                          onClick={() => toggleSpecialty(specialty)}
                          className={`px-3 py-1 rounded-full text-sm ${
                            formData.specialties.includes(specialty)
                              ? 'bg-blue-500/20 text-blue-400 ring-2 ring-blue-400/30'
                              : 'glass glass-hover'
                          }`}
                        >
                          {specialty}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Hourly Rate ($)
                    </label>
                    <input
                      type="number"
                      required
                      min="0"
                      step="0.01"
                      value={formData.rate || ''}
                      onChange={(e) => setFormData(prev => ({...prev, rate: parseFloat(e.target.value)}))}
                      className="w-full glass p-2"
                    />
                  </div>

                  {formData.role === 'contractor' && (
                    <>
                      <div>
                        <label className="block text-sm font-medium mb-1">
                          License Number
                        </label>
                        <input
                          type="text"
                          value={formData.license || ''}
                          onChange={(e) => setFormData(prev => ({...prev, license: e.target.value}))}
                          className="w-full glass p-2"
                        />
                      </div>

                      <div className="space-y-4">
                        <h4 className="text-sm font-medium">Insurance Information</h4>
                        <div>
                          <label className="block text-sm font-medium mb-1">
                            Provider
                          </label>
                          <input
                            type="text"
                            value={formData.insurance?.provider || ''}
                            onChange={(e) => setFormData(prev => ({
                              ...prev,
                              insurance: { ...prev.insurance, provider: e.target.value } as any
                            }))}
                            className="w-full glass p-2"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-1">
                            Policy Number
                          </label>
                          <input
                            type="text"
                            value={formData.insurance?.policyNumber || ''}
                            onChange={(e) => setFormData(prev => ({
                              ...prev,
                              insurance: { ...prev.insurance, policyNumber: e.target.value } as any
                            }))}
                            className="w-full glass p-2"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-1">
                            Expiration Date
                          </label>
                          <input
                            type="date"
                            value={formData.insurance?.expirationDate || ''}
                            onChange={(e) => setFormData(prev => ({
                              ...prev,
                              insurance: { ...prev.insurance, expirationDate: e.target.value } as any
                            }))}
                            className="w-full glass p-2"
                          />
                        </div>
                      </div>
                    </>
                  )}

                  <div className="flex justify-end gap-4 mt-6">
                    <button
                      type="button"
                      onClick={onClose}
                      className="glass glass-hover px-4 py-2"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="glass glass-hover px-4 py-2 bg-blue-500/20 disabled:opacity-50"
                    >
                      {isLoading ? 'Adding...' : 'Add Personnel'}
                    </button>
                  </div>
                </form>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default AddPersonnelModal

================
File: src/components/personnel/PersonnelCard.tsx
================
import { Star, MailIcon, Phone, Briefcase } from 'lucide-react'
import { Personnel } from '../../types/personnel'

interface PersonnelCardProps {
  person: Personnel
  onClick: () => void
}

const getAvailabilityClass = (availability: Personnel['availability']) => {
  switch (availability) {
    case 'available':
      return 'bg-green-500/20 text-green-400'
    case 'busy':
      return 'bg-yellow-500/20 text-yellow-400'
    case 'unavailable':
      return 'bg-red-500/20 text-red-400'
  }
}

const PersonnelCard = ({ person, onClick }: PersonnelCardProps) => {
  return (
    <div 
      onClick={onClick} 
      className="glass glass-hover p-6 cursor-pointer"
    >
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="font-medium">{person.firstName} {person.lastName}</h3>
          <p className="text-sm text-gray-400 mt-1 capitalize">{person.role}</p>
        </div>
        <span className={`px-3 py-1 rounded-full text-sm ${getAvailabilityClass(person.availability)}`}>
          {person.availability}
        </span>
      </div>

      <div className="space-y-3 text-sm">
        <div className="flex items-center gap-2 text-gray-400">
          <MailIcon className="w-4 h-4" />
          {person.email}
        </div>
        <div className="flex items-center gap-2 text-gray-400">
          <Phone className="w-4 h-4" />
          {person.phone}
        </div>
        <div className="flex items-center gap-2 text-gray-400">
          <Briefcase className="w-4 h-4" />
          {person.specialties.join(', ')}
        </div>
      </div>

      <div className="mt-4 pt-4 border-t border-white/10">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-1">
            <Star className="w-4 h-4 text-yellow-400" />
            <span>{person.rating}</span>
            <span className="text-gray-400">
              ({person.completedWorkOrders} jobs)
            </span>
          </div>
          <div className="text-sm">
            <span className="text-gray-400">Active: </span>
            <span>{person.activeWorkOrders}</span>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PersonnelCard

================
File: src/components/personnel/PersonnelModal.tsx
================
import { Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { 
  X, 
  Mail, 
  Phone, 
  Calendar, 
  Star, 
  DollarSign, 
  ShieldCheck, 
  ClipboardCheck
} from 'lucide-react'
import { Personnel } from '../../types/personnel'

interface PersonnelModalProps {
  person: Personnel
  isOpen: boolean
  onClose: () => void
  onStatusChange: (id: string, status: Personnel['status']) => void
}

const PersonnelModal = ({ person, isOpen, onClose, onStatusChange }: PersonnelModalProps) => {
  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-2xl glass p-6 rounded-xl">
                <div className="flex justify-between items-start">
                  <div>
                    <Dialog.Title className="text-xl font-semibold">
                      {person.firstName} {person.lastName}
                    </Dialog.Title>
                    <p className="text-gray-400 capitalize">{person.role}</p>
                  </div>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <div className="mt-6 grid grid-cols-2 gap-6">
                  <div className="space-y-6">
                    <div className="glass p-4">
                      <h3 className="font-medium mb-4">Contact Information</h3>
                      <div className="space-y-3">
                        <div className="flex items-center gap-3">
                          <Mail className="w-5 h-5 text-gray-400" />
                          <span>{person.email}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <Phone className="w-5 h-5 text-gray-400" />
                          <span>{person.phone}</span>
                        </div>
                      </div>
                    </div>

                    <div className="glass p-4">
                      <h3 className="font-medium mb-4">Work Details</h3>
                      <div className="space-y-3">
                        <div className="flex items-center gap-3">
                          <Calendar className="w-5 h-5 text-gray-400" />
                          <div>
                            <p className="text-sm text-gray-400">Hire Date</p>
                            <p>{new Date(person.hireDate).toLocaleDateString()}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <Star className="w-5 h-5 text-gray-400" />
                          <div>
                            <p className="text-sm text-gray-400">Rating</p>
                            <p>{person.rating} ({person.completedWorkOrders} completed jobs)</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <DollarSign className="w-5 h-5 text-gray-400" />
                          <div>
                            <p className="text-sm text-gray-400">Hourly Rate</p>
                            <p>${person.rate}/hour</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-6">
                    <div className="glass p-4">
                      <h3 className="font-medium mb-4">Specialties</h3>
                      <div className="flex flex-wrap gap-2">
                        {person.specialties.map((specialty) => (
                          <span
                            key={specialty}
                            className="px-3 py-1 rounded-full text-sm bg-blue-500/20 text-blue-400"
                          >
                            {specialty}
                          </span>
                        ))}
                      </div>
                    </div>

                    {person.role === 'contractor' && person.insurance && (
                      <div className="glass p-4">
                        <h3 className="font-medium mb-4">Contractor Details</h3>
                        <div className="space-y-3">
                          {person.license && (
                            <div className="flex items-center gap-3">
                              <ShieldCheck className="w-5 h-5 text-gray-400" />
                              <div>
                                <p className="text-sm text-gray-400">License</p>
                                <p>{person.license}</p>
                              </div>
                            </div>
                          )}
                          <div className="flex items-center gap-3">
                            <ClipboardCheck className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="text-sm text-gray-400">Insurance</p>
                              <p>{person.insurance.provider}</p>
                              <p className="text-sm text-gray-400">
                                Policy: {person.insurance.policyNumber}
                              </p>
                              <p className="text-sm text-gray-400">
                                Expires: {new Date(person.insurance.expirationDate).toLocaleDateString()}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="glass p-4">
                      <h3 className="font-medium mb-4">Status</h3>
                      <div className="flex gap-2">
                        {(['active', 'inactive', 'on-leave'] as const).map((status) => (
                          <button
                            key={status}
                            onClick={() => onStatusChange(person.id, status)}
                            className={`px-3 py-1 rounded-full text-sm ${
                              person.status === status ? 'ring-2 ring-white/50' : ''
                            } ${
                              status === 'active' ? 'bg-green-500/20 text-green-400' :
                              status === 'inactive' ? 'bg-red-500/20 text-red-400' :
                              'bg-yellow-500/20 text-yellow-400'
                            }`}
                          >
                            {status}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default PersonnelModal

================
File: src/components/AddPropertyModal.tsx
================
import { Fragment, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X } from 'lucide-react'
import { ethers } from 'ethers'
import { PropertyFormData } from '../types/property'

interface AddPropertyModalProps {
  isOpen: boolean
  onClose: () => void
  onAdd: (property: PropertyFormData) => Promise<void>
}

const AddPropertyModal = ({ isOpen, onClose, onAdd }: AddPropertyModalProps) => {
  const [formData, setFormData] = useState<PropertyFormData>({
    address: '',
    unit: '',
    city: '',
    state: '',
    zipCode: '',
  })
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    try {
      await onAdd(formData)
      onClose()
      setFormData({
        address: '',
        unit: '',
        city: '',
        state: '',
        zipCode: '',
      })
    } catch (error) {
      console.error('Error adding property:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md glass p-6 rounded-xl">
                <div className="flex justify-between items-center mb-4">
                  <Dialog.Title className="text-xl font-semibold">
                    Add New Property
                  </Dialog.Title>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Street Address
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.address}
                      onChange={(e) => setFormData(prev => ({...prev, address: e.target.value}))}
                      className="w-full glass p-2"
                      placeholder="123 Main St"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Unit (Optional)
                    </label>
                    <input
                      type="text"
                      value={formData.unit}
                      onChange={(e) => setFormData(prev => ({...prev, unit: e.target.value}))}
                      className="w-full glass p-2"
                      placeholder="Apt 4B"
                    />
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-1">
                        City
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.city}
                        onChange={(e) => setFormData(prev => ({...prev, city: e.target.value}))}
                        className="w-full glass p-2"
                        placeholder="City"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">
                        State
                      </label>
                      <input
                        type="text"
                        required
                        value={formData.state}
                        onChange={(e) => setFormData(prev => ({...prev, state: e.target.value}))}
                        className="w-full glass p-2"
                        placeholder="State"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      ZIP Code
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.zipCode}
                      onChange={(e) => setFormData(prev => ({...prev, zipCode: e.target.value}))}
                      className="w-full glass p-2"
                      placeholder="12345"
                    />
                  </div>

                  <div className="flex justify-end gap-4 mt-6">
                    <button
                      type="button"
                      onClick={onClose}
                      className="glass glass-hover px-4 py-2"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="glass glass-hover px-4 py-2 bg-blue-500/20 disabled:opacity-50"
                    >
                      {isLoading ? 'Adding...' : 'Add Property'}
                    </button>
                  </div>
                </form>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default AddPropertyModal

================
File: src/components/Analytics.tsx
================
import { useState, useEffect } from 'react'
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts'
import { Property } from '../types/property'
import { Personnel } from '../types/personnel'
import { WorkOrder } from '../types/workOrder'

type TimeRange = '6m' | '1y' | 'all'

const Analytics = () => {
  const [timeRange, setTimeRange] = useState<TimeRange>('6m')
  const [maintenanceData, setMaintenanceData] = useState<{ month: string; count: number }[]>([])
  const [contractorData, setContractorData] = useState<{
    name: string;
    rating: number;
    jobs: number;
  }[]>([])

  useEffect(() => {
    const loadData = () => {
      // Load work orders from localStorage
      const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
      const personnel: Personnel[] = JSON.parse(localStorage.getItem('personnel') || '[]')

      // Calculate date range based on selected time range
      const now = new Date()
      const rangeStart = new Date(now)
      switch (timeRange) {
        case '6m':
          rangeStart.setMonth(now.getMonth() - 6)
          break
        case '1y':
          rangeStart.setFullYear(now.getFullYear() - 1)
          break
        case 'all':
          rangeStart.setFullYear(2000) // Effectively all data
          break
      }

      // Filter work orders within the date range
      const filteredOrders = workOrders.filter(order => 
        new Date(order.createdAt) >= rangeStart
      )

      // Process maintenance trends
      const monthlyData = new Map<string, number>()
      filteredOrders.forEach(order => {
        const date = new Date(order.createdAt)
        const monthKey = date.toLocaleString('default', { month: 'short', year: '2-digit' })
        monthlyData.set(monthKey, (monthlyData.get(monthKey) || 0) + 1)
      })

      // Convert to array and sort chronologically
      const maintenanceTrends = Array.from(monthlyData.entries())
        .map(([month, count]) => ({ month, count }))
        .sort((a, b) => {
          const [monthA, yearA] = a.month.split(' ')
          const [monthB, yearB] = b.month.split(' ')
          return new Date(`${monthA} 20${yearA}`).getTime() - new Date(`${monthB} 20${yearB}`).getTime()
        })

      // Process contractor performance
      const contractors = personnel.filter(p => p.role === 'contractor')
      const contractorPerformance = contractors.map(contractor => {
        const contractorOrders = workOrders.filter(order => 
          order.assignedTo === `${contractor.firstName} ${contractor.lastName}` &&
          order.status === 'completed'
        )
        
        return {
          name: `${contractor.firstName} ${contractor.lastName}`,
          rating: contractor.rating,
          jobs: contractorOrders.length
        }
      }).sort((a, b) => b.jobs - a.jobs)

      setMaintenanceData(maintenanceTrends)
      setContractorData(contractorPerformance)
    }

    loadData()
  }, [timeRange])

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Analytics</h1>
        <select 
          className="glass glass-hover px-4 py-2 bg-transparent"
          value={timeRange}
          onChange={(e) => setTimeRange(e.target.value as TimeRange)}
        >
          <option value="6m">Last 6 months</option>
          <option value="1y">Last year</option>
          <option value="all">All time</option>
        </select>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-6">Maintenance Trends</h2>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={maintenanceData}>
                <XAxis dataKey="month" stroke="#94a3b8" />
                <YAxis stroke="#94a3b8" />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1e293b',
                    border: '1px solid rgba(255, 255, 255, 0.1)'
                  }}
                />
                <Bar dataKey="count" fill="#3b82f6" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Contractor Performance</h2>
          <div className="space-y-4">
            {contractorData.length === 0 ? (
              <p className="text-gray-400 text-center py-8">No contractor data available</p>
            ) : (
              contractorData.map((contractor) => (
                <div key={contractor.name} className="flex items-center justify-between p-4 bg-white/5 rounded-lg">
                  <div>
                    <h3 className="font-medium">{contractor.name}</h3>
                    <div className="flex items-center gap-2 mt-1">
                      <div className="flex">
                        {[...Array(5)].map((_, i) => (
                          <span key={i} className={`text-sm ${
                            i < Math.floor(contractor.rating) ? 'text-yellow-400' : 'text-gray-600'
                          }`}>★</span>
                        ))}
                      </div>
                      <span className="text-sm text-gray-400">({contractor.rating.toFixed(1)})</span>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-400">Completed Jobs</p>
                    <p className="font-medium">{contractor.jobs}</p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Key Metrics</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="p-4 bg-white/5 rounded-lg">
              <p className="text-gray-400">Average Response Time</p>
              <p className="text-2xl font-semibold mt-1">
                {calculateAverageResponseTime()} hrs
              </p>
            </div>
            <div className="p-4 bg-white/5 rounded-lg">
              <p className="text-gray-400">Completion Rate</p>
              <p className="text-2xl font-semibold mt-1">
                {calculateCompletionRate()}%
              </p>
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Cost Analysis</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="p-4 bg-white/5 rounded-lg">
              <p className="text-gray-400">Average Cost per Job</p>
              <p className="text-2xl font-semibold mt-1">
                ${calculateAverageCost()}
              </p>
            </div>
            <div className="p-4 bg-white/5 rounded-lg">
              <p className="text-gray-400">Total Spending</p>
              <p className="text-2xl font-semibold mt-1">
                ${calculateTotalSpending()}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Utility functions for calculations
const calculateAverageResponseTime = (): string => {
  const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
  const responseTimes = workOrders
    .filter(order => order.status === 'completed')
    .map(order => {
      const created = new Date(order.createdAt)
      const completed = new Date(order.notes.find(note => 
        note.content.toLowerCase().includes('started') ||
        note.content.toLowerCase().includes('began')
      )?.createdAt || order.createdAt)
      return (completed.getTime() - created.getTime()) / (1000 * 60 * 60) // Convert to hours
    })

  if (responseTimes.length === 0) return '0'
  const average = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
  return average.toFixed(1)
}

const calculateCompletionRate = (): string => {
  const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
  if (workOrders.length === 0) return '0'
  
  const completed = workOrders.filter(order => order.status === 'completed').length
  return ((completed / workOrders.length) * 100).toFixed(1)
}

const calculateAverageCost = (): string => {
  const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
  const completedOrders = workOrders.filter(order => 
    order.status === 'completed' && order.actualCost
  )
  
  if (completedOrders.length === 0) return '0'
  const totalCost = completedOrders.reduce((sum, order) => sum + (order.actualCost || 0), 0)
  return (totalCost / completedOrders.length).toFixed(2)
}

const calculateTotalSpending = (): string => {
  const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
  const totalCost = workOrders
    .filter(order => order.status === 'completed')
    .reduce((sum, order) => sum + (order.actualCost || 0), 0)
  
  return totalCost.toFixed(2)
}

export default Analytics

================
File: src/components/Dashboard.tsx
================
import { useEffect, useState } from 'react'
import { Building2, Wrench, Shield, AlertCircle } from 'lucide-react'
import StatCard from './StatCard'
import MaintenanceTable from './MaintenanceTable'
import PropertyTrendChart from './PropertyTrendChart'
import MaintenanceDistributionChart from './MaintenanceDistributionChart'
import { Property } from '../types/property'
import { WorkOrder } from '../types/workOrder'
import { Personnel } from '../types/personnel'
import { useAuth } from '../contexts/AuthContext'

const Dashboard = () => {
  const { currentUser } = useAuth()
  const [dashboardData, setDashboardData] = useState({
    properties: 0,
    activeMaintenanceCount: 0,
    validWarranties: 0,
    complianceIssues: 0,
    propertyChange: 0,
    maintenanceChange: 0,
    warrantyChange: 0,
    complianceChange: 0
  })

  useEffect(() => {
    const calculateDashboardStats = () => {
      const properties: Property[] = JSON.parse(localStorage.getItem('properties') || '[]')
      const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
      const personnel: Personnel[] = JSON.parse(localStorage.getItem('personnel') || '[]')

      // Calculate active maintenance tasks
      const activeMaintenanceCount = workOrders.filter(
        wo => wo.status === 'pending' || wo.status === 'in-progress'
      ).length

      // Calculate valid warranties (example logic - adjust as needed)
      const validWarranties = properties.reduce((sum, prop) => sum + prop.warranties, 0)

      // Calculate compliance issues (example - properties without recent inspections)
      const threeMonthsAgo = new Date()
      threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3)
      const complianceIssues = properties.filter(
        prop => new Date(prop.lastInspection) < threeMonthsAgo
      ).length

      // Calculate changes (simplified - you might want to compare with previous period)
      const propertyChange = properties.length > 0 ? +3 : 0 // Example change
      const maintenanceChange = activeMaintenanceCount > 0 ? +12 : 0
      const warrantyChange = validWarranties > 0 ? -2 : 0
      const complianceChange = complianceIssues > 0 ? +1 : 0

      setDashboardData({
        properties: properties.length,
        activeMaintenanceCount,
        validWarranties,
        complianceIssues,
        propertyChange,
        maintenanceChange,
        warrantyChange,
        complianceChange
      })
    }

    calculateDashboardStats()
  }, [])

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Dashboard Overview</h1>
        <div className="flex items-center gap-4">
          <span className="text-gray-400">Welcome, {currentUser?.email}</span>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard 
          icon={<Building2 />}
          title="Total Properties"
          value={dashboardData.properties.toString()}
          change={dashboardData.propertyChange.toString()}
        />
        <StatCard 
          icon={<Wrench />}
          title="Active Maintenance"
          value={dashboardData.activeMaintenanceCount.toString()}
          change={dashboardData.maintenanceChange.toString()}
        />
        <StatCard 
          icon={<Shield />}
          title="Valid Warranties"
          value={dashboardData.validWarranties.toString()}
          change={dashboardData.warrantyChange.toString()}
        />
        <StatCard 
          icon={<AlertCircle />}
          title="Compliance Issues"
          value={dashboardData.complianceIssues.toString()}
          change={dashboardData.complianceChange.toString()}
          negative
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Recent Maintenance</h2>
          <MaintenanceTable />
        </div>
        
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Warranty Status</h2>
          <div className="flex flex-col gap-4">
            {dashboardData.validWarranties > 0 ? (
              <>
                <div className="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                  <div>
                    <h3 className="font-medium">HVAC System</h3>
                    <p className="text-sm text-gray-400">Property ID: #1234</p>
                  </div>
                  <span className="px-3 py-1 rounded-full bg-green-500/20 text-green-400">
                    Valid
                  </span>
                </div>
                <div className="flex justify-between items-center p-4 bg-white/5 rounded-lg">
                  <div>
                    <h3 className="font-medium">Roof Installation</h3>
                    <p className="text-sm text-gray-400">Property ID: #1235</p>
                  </div>
                  <span className="px-3 py-1 rounded-full bg-yellow-500/20 text-yellow-400">
                    Expiring Soon
                  </span>
                </div>
              </>
            ) : (
              <p className="text-center text-gray-400 py-8">No warranty data available</p>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Property Occupancy Trends</h2>
          <PropertyTrendChart />
        </div>
        
        <div className="glass p-6">
          <h2 className="text-xl font-semibold mb-4">Maintenance Distribution</h2>
          <MaintenanceDistributionChart />
        </div>
      </div>
    </div>
  )
}

export default Dashboard

================
File: src/components/ErrorBoundary.tsx
================
import { Component, ErrorInfo, ReactNode } from 'react'

interface Props {
  children: ReactNode
}

interface State {
  hasError: boolean
  error?: Error
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  }

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo)
  }

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center p-4">
          <div className="glass p-8 max-w-md text-center">
            <h1 className="text-2xl font-bold mb-4">Something went wrong</h1>
            <p className="text-gray-400 mb-6">
              We're sorry for the inconvenience. Please try refreshing the page.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="glass glass-hover px-4 py-2 bg-blue-500/20"
            >
              Refresh Page
            </button>
          </div>
        </div>
      )
    }

    return this.props.children
  }
}

export default ErrorBoundary

================
File: src/components/Maintenance.tsx
================
import { useState, useEffect } from 'react'
import { Plus, Filter, Search } from 'lucide-react'
import CreateWorkOrderModal from './maintenance/CreateWorkOrderModal'
import WorkOrderCard from './maintenance/WorkOrderCard'
import WorkOrderModal from './maintenance/WorkOrderModal'
import { WorkOrder, WorkOrderFormData, WorkOrderNote } from '../types/workOrder'

const MOCK_PROPERTIES = [
  { id: '1', address: '123 Main St' },
  { id: '2', address: '456 Oak Ave' },
  { id: '3', address: '789 Pine Rd' },
]

const Maintenance = () => {
  const [workOrders, setWorkOrders] = useState<WorkOrder[]>([])
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [selectedWorkOrder, setSelectedWorkOrder] = useState<WorkOrder | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState<WorkOrder['status'] | 'all'>('all')

  useEffect(() => {
    const savedWorkOrders = localStorage.getItem('workOrders')
    if (savedWorkOrders) {
      setWorkOrders(JSON.parse(savedWorkOrders))
    }
  }, [])

  const saveWorkOrders = (orders: WorkOrder[]) => {
    localStorage.setItem('workOrders', JSON.stringify(orders))
    setWorkOrders(orders)
  }

  const handleCreateWorkOrder = async (data: WorkOrderFormData) => {
    const newWorkOrder: WorkOrder = {
      id: crypto.randomUUID(),
      ...data,
      status: 'pending',
      createdAt: new Date().toISOString(),
      notes: [],
      attachments: [],
    }
    saveWorkOrders([...workOrders, newWorkOrder])
  }

  const handleStatusChange = (id: string, status: WorkOrder['status']) => {
    const updatedWorkOrders = workOrders.map(wo => 
      wo.id === id ? { ...wo, status } : wo
    )
    saveWorkOrders(updatedWorkOrders)
  }

  const handleAddNote = (id: string, noteData: Omit<WorkOrderNote, 'id' | 'createdAt'>) => {
    const updatedWorkOrders = workOrders.map(wo => {
      if (wo.id === id) {
        const newNote: WorkOrderNote = {
          id: crypto.randomUUID(),
          ...noteData,
          createdAt: new Date().toISOString(),
        }
        return {
          ...wo,
          notes: [newNote, ...wo.notes],
        }
      }
      return wo
    })
    saveWorkOrders(updatedWorkOrders)
  }

  const filteredWorkOrders = workOrders
    .filter(wo => statusFilter === 'all' || wo.status === statusFilter)
    .filter(wo => 
      wo.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      wo.description.toLowerCase().includes(searchQuery.toLowerCase())
    )

  const groupedWorkOrders = filteredWorkOrders.reduce((acc, wo) => {
    if (!acc[wo.status]) acc[wo.status] = []
    acc[wo.status].push(wo)
    return acc
  }, {} as Record<WorkOrder['status'], WorkOrder[]>)

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Work Orders</h1>
        <div className="flex gap-4">
          <div className="glass p-2 flex items-center gap-2 w-64">
            <Search className="w-5 h-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search work orders..."
              className="bg-transparent border-none outline-none w-full"
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value as WorkOrder['status'] | 'all')}
            className="glass glass-hover px-4 py-2"
          >
            <option value="all">All Status</option>
            <option value="pending">Pending</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
          <button
            onClick={() => setIsCreateModalOpen(true)}
            className="glass glass-hover px-4 py-2 flex items-center gap-2 bg-blue-500/20"
          >
            <Plus className="w-4 h-4" />
            Create Work Order
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {(['pending', 'in-progress', 'completed', 'cancelled'] as const).map((status) => (
          <div key={status} className="space-y-4">
            <h2 className="text-lg font-semibold capitalize">{status}</h2>
            <div className="space-y-4">
              {(groupedWorkOrders[status] || []).map((workOrder) => (
                <WorkOrderCard
                  key={workOrder.id}
                  workOrder={workOrder}
                  onClick={() => setSelectedWorkOrder(workOrder)}
                />
              ))}
            </div>
          </div>
        ))}
      </div>

      <CreateWorkOrderModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateWorkOrder}
        properties={MOCK_PROPERTIES}
      />

      {selectedWorkOrder && (
        <WorkOrderModal
          workOrder={selectedWorkOrder}
          isOpen={true}
          onClose={() => setSelectedWorkOrder(null)}
          onStatusChange={handleStatusChange}
          onAddNote={handleAddNote}
          property={MOCK_PROPERTIES.find(p => p.id === selectedWorkOrder.propertyId)!}
        />
      )}
    </div>
  )
}

export default Maintenance

================
File: src/components/MaintenanceDistributionChart.tsx
================
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts'

const MaintenanceDistributionChart = () => {
  const data = [
    { name: 'HVAC', value: 35 },
    { name: 'Plumbing', value: 25 },
    { name: 'Electrical', value: 20 },
    { name: 'Structural', value: 15 },
    { name: 'Other', value: 5 },
  ]

  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6']

  return (
    <div className="h-[300px]">
      <ResponsiveContainer width="100%" height="100%">
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            innerRadius={60}
            outerRadius={90}
            paddingAngle={5}
            dataKey="value"
          >
            {data.map((_, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip
            contentStyle={{
              backgroundColor: '#1e293b',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}
          />
          <Legend />
        </PieChart>
      </ResponsiveContainer>
    </div>
  )
}

export default MaintenanceDistributionChart

================
File: src/components/MaintenanceMode.tsx
================
import { Wrench } from 'lucide-react'

const MaintenanceMode = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4">
      <div className="glass p-8 max-w-md text-center">
        <div className="flex justify-center mb-6">
          <div className="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center">
            <Wrench className="w-8 h-8 text-blue-400" />
          </div>
        </div>
        <h1 className="text-2xl font-bold mb-4">Under Maintenance</h1>
        <p className="text-gray-400">
          We're currently performing scheduled maintenance to improve your experience.
          Please check back soon.
        </p>
        <p className="mt-4 text-sm text-gray-500">
          Expected completion: {new Date().toLocaleDateString()}
        </p>
      </div>
    </div>
  )
}

export default MaintenanceMode

================
File: src/components/MaintenanceTable.tsx
================
import { Clock, CheckCircle2, AlertCircle } from 'lucide-react'

const MaintenanceTable = () => {
  const maintenanceData = [
    {
      id: 1,
      property: "123 Main St",
      issue: "HVAC Repair",
      status: "In Progress",
      date: "2024-02-15",
    },
    {
      id: 2,
      property: "456 Oak Ave",
      issue: "Plumbing",
      status: "Completed",
      date: "2024-02-14",
    },
    {
      id: 3,
      property: "789 Pine Rd",
      issue: "Electrical",
      status: "Pending",
      date: "2024-02-13",
    },
  ]

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Completed':
        return <CheckCircle2 className="w-5 h-5 text-green-400" />
      case 'In Progress':
        return <Clock className="w-5 h-5 text-yellow-400" />
      case 'Pending':
        return <AlertCircle className="w-5 h-5 text-red-400" />
      default:
        return null
    }
  }

  return (
    <div className="overflow-x-auto">
      <table className="w-full">
        <thead>
          <tr className="text-left text-gray-400">
            <th className="pb-4">Property</th>
            <th className="pb-4">Issue</th>
            <th className="pb-4">Status</th>
            <th className="pb-4">Date</th>
          </tr>
        </thead>
        <tbody>
          {maintenanceData.map((item) => (
            <tr key={item.id} className="border-t border-white/10">
              <td className="py-4">{item.property}</td>
              <td className="py-4">{item.issue}</td>
              <td className="py-4">
                <div className="flex items-center gap-2">
                  {getStatusIcon(item.status)}
                  {item.status}
                </div>
              </td>
              <td className="py-4">{item.date}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default MaintenanceTable

================
File: src/components/Personnel.tsx
================
import { useState, useEffect } from 'react'
import { Plus, Search, SlidersHorizontal } from 'lucide-react'
import { Personnel } from '../types/personnel'
import PersonnelCard from './personnel/PersonnelCard'
import AddPersonnelModal from './personnel/AddPersonnelModal'
import PersonnelModal from './personnel/PersonnelModal'

const MOCK_INITIAL_PERSONNEL: Personnel[] = [
  {
    id: '1',
    firstName: 'John',
    lastName: 'Smith',
    role: 'employee',
    email: 'john.smith@company.com',
    phone: '(555) 123-4567',
    specialties: ['HVAC', 'General Maintenance'],
    rate: 45,
    status: 'active',
    hireDate: '2023-01-15',
    activeWorkOrders: 3,
    completedWorkOrders: 145,
    rating: 4.8,
    availability: 'busy',
  },
  {
    id: '2',
    firstName: 'Sarah',
    lastName: 'Johnson',
    role: 'contractor',
    email: 'sarah@contractingco.com',
    phone: '(555) 987-6543',
    specialties: ['Plumbing', 'Electrical'],
    rate: 65,
    status: 'active',
    hireDate: '2023-03-20',
    activeWorkOrders: 1,
    completedWorkOrders: 89,
    rating: 4.9,
    availability: 'available',
    license: 'PL-123456',
    insurance: {
      provider: 'SafeCo Insurance',
      policyNumber: 'INS-789012',
      expirationDate: '2024-12-31',
    },
  }
]

const PersonnelPage = () => {
  const [personnel, setPersonnel] = useState<Personnel[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [roleFilter, setRoleFilter] = useState<'all' | Personnel['role']>('all')
  const [isAddModalOpen, setIsAddModalOpen] = useState(false)
  const [selectedPerson, setSelectedPerson] = useState<Personnel | null>(null)

  useEffect(() => {
    const savedPersonnel = localStorage.getItem('personnel')
    if (savedPersonnel) {
      setPersonnel(JSON.parse(savedPersonnel))
    } else {
      localStorage.setItem('personnel', JSON.stringify(MOCK_INITIAL_PERSONNEL))
      setPersonnel(MOCK_INITIAL_PERSONNEL)
    }
  }, [])

  const handleAddPerson = async (data: Personnel) => {
    const newPersonnel = [...personnel, data]
    localStorage.setItem('personnel', JSON.stringify(newPersonnel))
    setPersonnel(newPersonnel)
  }

  const handleStatusChange = (id: string, status: Personnel['status']) => {
    const updatedPersonnel = personnel.map(person =>
      person.id === id ? { ...person, status } : person
    )
    localStorage.setItem('personnel', JSON.stringify(updatedPersonnel))
    setPersonnel(updatedPersonnel)
  }

  const filteredPersonnel = personnel
    .filter(person =>
      roleFilter === 'all' || person.role === roleFilter
    )
    .filter(person =>
      `${person.firstName} ${person.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||
      person.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      person.specialties.some(specialty => specialty.toLowerCase().includes(searchQuery.toLowerCase()))
    )

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Personnel Management</h1>
        <button
          onClick={() => setIsAddModalOpen(true)}
          className="glass glass-hover px-4 py-2 flex items-center gap-2 bg-blue-500/20"
        >
          <Plus className="w-4 h-4" />
          Add Personnel
        </button>
      </div>

      <div className="flex gap-4 items-center">
        <div className="glass p-2 flex items-center gap-2 flex-1 max-w-md">
          <Search className="w-5 h-5 text-gray-400" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Search personnel..."
            className="bg-transparent border-none outline-none w-full"
          />
        </div>

        <select
          value={roleFilter}
          onChange={(e) => setRoleFilter(e.target.value as 'all' | Personnel['role'])}
          className="glass glass-hover px-4 py-2"
        >
          <option value="all">All Roles</option>
          <option value="employee">Employees</option>
          <option value="contractor">Contractors</option>
        </select>

        <button className="glass glass-hover p-2">
          <SlidersHorizontal className="w-5 h-5" />
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredPersonnel.map((person) => (
          <PersonnelCard
            key={person.id}
            person={person}
            onClick={() => setSelectedPerson(person)}
          />
        ))}
      </div>

      <AddPersonnelModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onAdd={handleAddPerson}
      />

      {selectedPerson && (
        <PersonnelModal
          person={selectedPerson}
          isOpen={true}
          onClose={() => setSelectedPerson(null)}
          onStatusChange={handleStatusChange}
        />
      )}
    </div>
  )
}

export default PersonnelPage

================
File: src/components/Properties.tsx
================
import { useState, useEffect } from 'react'
import { Plus, Search, Loader2 } from 'lucide-react'
import { ethers } from 'ethers'
import AddPropertyModal from './AddPropertyModal'
import PropertyModal from './PropertyModal'
import { Property, PropertyFormData } from '../types/property'

const PROPERTY_CONTRACT_ABI = [
  "function initialize(string memory _address, string memory _details) public",
  "function getPropertyDetails() public view returns (string memory, string memory)",
]

// Mock data for initial properties
const MOCK_INITIAL_PROPERTIES: Property[] = [
  {
    id: '1',
    address: '123 Main Street',
    city: 'San Francisco',
    state: 'CA',
    zipCode: '94105',
    maintenanceTasks: 3,
    warranties: 2,
    lastInspection: '2024-02-01',
    status: 'active',
    contractAddress: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
    owner: {
      name: 'John Doe',
      email: 'john@example.com',
      phone: '(555) 123-4567',
      wallet: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
    },
    maintenanceHistory: [
      {
        id: '1',
        date: '2024-02-15',
        type: 'HVAC Maintenance',
        description: 'Annual inspection and filter replacement',
        cost: 250,
        status: 'completed',
        contractor: 'ABC HVAC Services'
      }
    ]
  },
  {
    id: '2',
    address: '456 Oak Avenue',
    unit: '2B',
    city: 'New York',
    state: 'NY',
    zipCode: '10001',
    maintenanceTasks: 1,
    warranties: 4,
    lastInspection: '2024-01-15',
    status: 'active',
    contractAddress: '0x892d35Cc6634C0532925a3b844Bc454e4438f55f',
    owner: {
      name: 'Jane Smith',
      email: 'jane@example.com',
      phone: '(555) 987-6543',
      wallet: '0x892d35Cc6634C0532925a3b844Bc454e4438f55f'
    },
    maintenanceHistory: [
      {
        id: '2',
        date: '2024-01-20',
        type: 'Plumbing',
        description: 'Fix leaking bathroom faucet',
        cost: 150,
        status: 'completed',
        contractor: 'Quick Plumbing Co'
      }
    ]
  },
  {
    id: '3',
    address: '789 Pine Road',
    city: 'Chicago',
    state: 'IL',
    zipCode: '60601',
    maintenanceTasks: 2,
    warranties: 3,
    lastInspection: '2024-02-10',
    status: 'active',
    contractAddress: '0x992d35Cc6634C0532925a3b844Bc454e4438f66g',
    owner: {
      name: 'Robert Johnson',
      email: 'robert@example.com',
      phone: '(555) 456-7890',
      wallet: '0x992d35Cc6634C0532925a3b844Bc454e4438f66g'
    },
    maintenanceHistory: [
      {
        id: '3',
        date: '2024-02-05',
        type: 'Electrical',
        description: 'Update circuit breaker panel',
        cost: 450,
        status: 'completed',
        contractor: 'Elite Electric'
      }
    ]
  }
]

const Properties = () => {
  const [properties, setProperties] = useState<Property[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [isAddModalOpen, setIsAddModalOpen] = useState(false)
  const [selectedProperty, setSelectedProperty] = useState<Property | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    // Load properties from localStorage or use mock data if none exists
    const savedProperties = localStorage.getItem('properties')
    if (savedProperties) {
      setProperties(JSON.parse(savedProperties))
    } else {
      // Initialize with mock data if no properties exist
      localStorage.setItem('properties', JSON.stringify(MOCK_INITIAL_PROPERTIES))
      setProperties(MOCK_INITIAL_PROPERTIES)
    }
  }, [])

  const connectWallet = async () => {
    if (!window.ethereum) {
      alert('Please install MetaMask to use this feature')
      return null
    }

    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' })
      const provider = new ethers.BrowserProvider(window.ethereum)
      const signer = await provider.getSigner()
      return signer
    } catch (error) {
      console.error('Error connecting wallet:', error)
      return null
    }
  }

  const deployPropertyContract = async (propertyData: PropertyFormData) => {
    const signer = await connectWallet()
    if (!signer) return null

    const contractBytecode = "608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063486c5f3d1461003b5780638129fc1c14610050575b600080fd5b61004e610049366004610477565b610065565b005b61004e61006336600461052f565b6100f5565b6040518060400160405280838152602001828152506000820151816000019081610090919061059e565b50602082015181600101908161010591906105f0565b505050565b60408051808201909152600080825260208201526040518060400160405280838152602001828152506000820151816000019081610133919061059e565b50602082015181600101908161014891906105f0565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261017557600080fd5b813567ffffffffffffffff8082111561019057610190610150565b604051601f8301601f19908116603f011681019082821181831017156101b8576101b8610150565b816040528381528660208588010111156101d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156102045600a265627a7a723158209f7f891b456ec01502a6347a94104b3fa54dfe54c5c34a04a04749e4d34c8add64736f6c634300081100032"

    try {
      setIsLoading(true)
      const factory = new ethers.ContractFactory(PROPERTY_CONTRACT_ABI, contractBytecode, signer)
      const propertyAddress = `${propertyData.address}${propertyData.unit ? ` Unit ${propertyData.unit}` : ''}`
      const propertyDetails = `${propertyData.city}, ${propertyData.state} ${propertyData.zipCode}`
      
      const contract = await factory.deploy()
      await contract.waitForDeployment()
      
      const contractAddress = await contract.getAddress()
      await contract.initialize(propertyAddress, propertyDetails)
      
      return contractAddress
    } catch (error) {
      console.error('Error deploying contract:', error)
      return null
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddProperty = async (propertyData: PropertyFormData) => {
    const contractAddress = await deployPropertyContract(propertyData)
    if (!contractAddress) {
      alert('Failed to deploy property contract')
      return
    }

    const newProperty: Property = {
      id: crypto.randomUUID(),
      address: propertyData.address,
      unit: propertyData.unit,
      city: propertyData.city,
      state: propertyData.state,
      zipCode: propertyData.zipCode,
      maintenanceTasks: 0,
      warranties: 0,
      lastInspection: new Date().toISOString().split('T')[0],
      status: 'active',
      contractAddress,
      owner: {
        name: 'John Doe',
        email: 'john@example.com',
        phone: '(555) 123-4567',
        wallet: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
      },
      maintenanceHistory: []
    }

    const updatedProperties = [...properties, newProperty]
    setProperties(updatedProperties)
    localStorage.setItem('properties', JSON.stringify(updatedProperties))
  }

  const filteredProperties = properties.filter(property => 
    property.address.toLowerCase().includes(searchQuery.toLowerCase()) ||
    property.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
    property.state.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Properties</h1>
        <button 
          className="glass glass-hover px-4 py-2 flex items-center gap-2"
          onClick={() => setIsAddModalOpen(true)}
          disabled={isLoading}
        >
          {isLoading ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <Plus className="w-4 h-4" />
          )}
          Add Property
        </button>
      </div>

      <div className="glass p-2 flex items-center gap-2 max-w-md">
        <Search className="w-5 h-5 text-gray-400" />
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search properties..."
          className="bg-transparent border-none outline-none w-full"
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredProperties.map((property) => (
          <div
            key={property.id}
            className="glass glass-hover p-6 cursor-pointer"
            onClick={() => setSelectedProperty(property)}
          >
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold">{property.address}</h3>
                <p className="text-sm text-gray-400">
                  {property.unit ? `Unit ${property.unit}, ` : ''}{property.city}, {property.state}
                </p>
              </div>
              <span className="px-3 py-1 rounded-full bg-blue-500/20 text-blue-400">
                {property.status}
              </span>
            </div>
            <div className="mt-4 space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Maintenance Tasks</span>
                <span>{property.maintenanceTasks} Active</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Warranties</span>
                <span>{property.warranties} Valid</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Last Inspection</span>
                <span>{property.lastInspection}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">Contract</span>
                <span className="truncate ml-2 text-blue-400">
                  {property.contractAddress?.slice(0, 6)}...{property.contractAddress?.slice(-4)}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      <AddPropertyModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onAdd={handleAddProperty}
      />

      {selectedProperty && (
        <PropertyModal
          property={selectedProperty}
          isOpen={true}
          onClose={() => setSelectedProperty(null)}
        />
      )}
    </div>
  )
}

export default Properties

================
File: src/components/PropertyModal.tsx
================
import { Fragment } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { X, ExternalLink, Building2, User, Phone, Mail, Wallet } from 'lucide-react'
import { Property } from '../types/property'

interface PropertyModalProps {
  property: Property
  isOpen: boolean
  onClose: () => void
}

const PropertyModal = ({ property, isOpen, onClose }: PropertyModalProps) => {
  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/25 backdrop-blur-sm" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-3xl glass p-6 rounded-xl">
                <div className="flex justify-between items-start">
                  <div className="flex items-start gap-4">
                    <div className="p-3 glass">
                      <Building2 className="w-6 h-6" />
                    </div>
                    <div>
                      <Dialog.Title className="text-xl font-semibold">
                        {property.address}
                        {property.unit && ` Unit ${property.unit}`}
                      </Dialog.Title>
                      <p className="text-gray-400">
                        {property.city}, {property.state} {property.zipCode}
                      </p>
                    </div>
                  </div>
                  <button onClick={onClose} className="text-gray-400 hover:text-white">
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <div className="mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div className="space-y-6">
                    <div className="glass p-4">
                      <h3 className="text-lg font-semibold mb-4">Owner Information</h3>
                      <div className="space-y-3">
                        <div className="flex items-center gap-3">
                          <User className="w-5 h-5 text-gray-400" />
                          <span>{property.owner.name}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <Mail className="w-5 h-5 text-gray-400" />
                          <span>{property.owner.email}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <Phone className="w-5 h-5 text-gray-400" />
                          <span>{property.owner.phone}</span>
                        </div>
                        <div className="flex items-center gap-3">
                          <Wallet className="w-5 h-5 text-gray-400" />
                          <span className="truncate">{property.owner.wallet}</span>
                        </div>
                      </div>
                    </div>

                    <div className="glass p-4">
                      <h3 className="text-lg font-semibold mb-4">Smart Contract</h3>
                      <div className="flex items-center gap-2">
                        <code className="text-sm bg-white/5 p-2 rounded flex-1 truncate">
                          {property.contractAddress}
                        </code>
                        <a
                          href={`https://etherscan.io/address/${property.contractAddress}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="p-2 glass glass-hover"
                        >
                          <ExternalLink className="w-5 h-5" />
                        </a>
                      </div>
                    </div>
                  </div>

                  <div className="glass p-4">
                    <h3 className="text-lg font-semibold mb-4">Maintenance History</h3>
                    <div className="space-y-4 max-h-[400px] overflow-y-auto">
                      {property.maintenanceHistory.map((record) => (
                        <div key={record.id} className="glass p-3">
                          <div className="flex justify-between items-start">
                            <div>
                              <h4 className="font-medium">{record.type}</h4>
                              <p className="text-sm text-gray-400">{record.description}</p>
                            </div>
                            <span className={`px-2 py-1 rounded-full text-sm ${
                              record.status === 'completed' ? 'bg-green-500/20 text-green-400' :
                              record.status === 'in-progress' ? 'bg-blue-500/20 text-blue-400' :
                              'bg-yellow-500/20 text-yellow-400'
                            }`}>
                              {record.status}
                            </span>
                          </div>
                          <div className="mt-2 flex justify-between text-sm text-gray-400">
                            <span>{record.date}</span>
                            <span>${record.cost.toFixed(2)}</span>
                          </div>
                          <div className="mt-1 text-sm text-gray-400">
                            Contractor: {record.contractor}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  )
}

export default PropertyModal

================
File: src/components/PropertyTrendChart.tsx
================
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts'

const PropertyTrendChart = () => {
  const data = [
    { month: 'Jan', occupancy: 92 },
    { month: 'Feb', occupancy: 94 },
    { month: 'Mar', occupancy: 91 },
    { month: 'Apr', occupancy: 95 },
    { month: 'May', occupancy: 97 },
    { month: 'Jun', occupancy: 96 },
  ]

  return (
    <div className="h-[300px]">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={data}>
          <XAxis dataKey="month" stroke="#94a3b8" />
          <YAxis stroke="#94a3b8" domain={[85, 100]} />
          <Tooltip
            contentStyle={{
              backgroundColor: '#1e293b',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}
          />
          <Line 
            type="monotone" 
            dataKey="occupancy" 
            stroke="#3b82f6" 
            strokeWidth={2}
            dot={{ fill: '#3b82f6', strokeWidth: 2 }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

export default PropertyTrendChart

================
File: src/components/Reports.tsx
================
import { useState } from 'react'
import { FileText, Download, Calendar, Filter, Loader2 } from 'lucide-react'
import { WorkOrder } from '../types/workOrder'
import { Property } from '../types/property'
import { Personnel } from '../types/personnel'

type ReportType = 'maintenance' | 'property' | 'personnel' | 'financial'
type DateRange = '7d' | '30d' | '90d' | '1y' | 'all'

interface ReportData {
  maintenance: WorkOrder[]
  property: Array<Property & { workOrders: WorkOrder[] }>
  personnel: Array<Personnel & { 
    workOrders: WorkOrder[]
    completionRate: number
    averageResponse: number 
  }>
  financial: {
    totalEstimated: number
    totalActual: number
    variance: number
    byCategory: Record<string, {
      estimated: number
      actual: number
      count: number
    }>
    monthlySpending: Array<{
      month: string
      amount: number
    }>
  }
}

const Reports = () => {
  const [selectedReport, setSelectedReport] = useState<ReportType>('maintenance')
  const [dateRange, setDateRange] = useState<DateRange>('30d')
  const [isGenerating, setIsGenerating] = useState(false)
  const [reportData, setReportData] = useState<ReportData | null>(null)

  const calculateDateRange = () => {
    const now = new Date()
    const rangeStart = new Date()
    switch (dateRange) {
      case '7d':
        rangeStart.setDate(now.getDate() - 7)
        break
      case '30d':
        rangeStart.setDate(now.getDate() - 30)
        break
      case '90d':
        rangeStart.setDate(now.getDate() - 90)
        break
      case '1y':
        rangeStart.setFullYear(now.getFullYear() - 1)
        break
      case 'all':
        rangeStart.setFullYear(2000)
        break
    }
    return rangeStart
  }

  const generateMaintenanceReport = (workOrders: WorkOrder[], rangeStart: Date) => {
    return workOrders.filter(wo => new Date(wo.createdAt) >= rangeStart)
  }

  const generatePropertyReport = (
    properties: Property[], 
    workOrders: WorkOrder[], 
    rangeStart: Date
  ) => {
    return properties.map(property => ({
      ...property,
      workOrders: workOrders.filter(wo => 
        wo.propertyId === property.id && 
        new Date(wo.createdAt) >= rangeStart
      )
    }))
  }

  const generatePersonnelReport = (
    personnel: Personnel[],
    workOrders: WorkOrder[],
    rangeStart: Date
  ) => {
    return personnel.map(person => {
      const personWorkOrders = workOrders.filter(wo => 
        wo.assignedTo === `${person.firstName} ${person.lastName}` &&
        new Date(wo.createdAt) >= rangeStart
      )

      const completedOrders = personWorkOrders.filter(wo => wo.status === 'completed')
      const completionRate = personWorkOrders.length > 0
        ? (completedOrders.length / personWorkOrders.length) * 100
        : 0

      const responseTimes = completedOrders.map(wo => {
        const created = new Date(wo.createdAt)
        const firstNote = wo.notes.find(note => 
          note.content.toLowerCase().includes('started') ||
          note.content.toLowerCase().includes('began')
        )
        const started = firstNote ? new Date(firstNote.createdAt) : created
        return (started.getTime() - created.getTime()) / (1000 * 60 * 60) // hours
      })

      const averageResponse = responseTimes.length > 0
        ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
        : 0

      return {
        ...person,
        workOrders: personWorkOrders,
        completionRate,
        averageResponse
      }
    })
  }

  const generateFinancialReport = (workOrders: WorkOrder[], rangeStart: Date) => {
    const filteredOrders = workOrders.filter(wo => 
      new Date(wo.createdAt) >= rangeStart &&
      wo.status === 'completed'
    )

    const totalEstimated = filteredOrders.reduce((sum, wo) => sum + (wo.estimatedCost || 0), 0)
    const totalActual = filteredOrders.reduce((sum, wo) => sum + (wo.actualCost || 0), 0)

    const byCategory = filteredOrders.reduce((acc, wo) => {
      if (!acc[wo.category]) {
        acc[wo.category] = { estimated: 0, actual: 0, count: 0 }
      }
      acc[wo.category].estimated += wo.estimatedCost || 0
      acc[wo.category].actual += wo.actualCost || 0
      acc[wo.category].count += 1
      return acc
    }, {} as Record<string, { estimated: number; actual: number; count: number }>)

    const monthlySpending = filteredOrders.reduce((acc, wo) => {
      const date = new Date(wo.createdAt)
      const monthKey = date.toLocaleString('default', { month: 'short', year: '2-digit' })
      const existingMonth = acc.find(m => m.month === monthKey)
      
      if (existingMonth) {
        existingMonth.amount += wo.actualCost || 0
      } else {
        acc.push({ month: monthKey, amount: wo.actualCost || 0 })
      }
      return acc
    }, [] as Array<{ month: string; amount: number }>)
    .sort((a, b) => {
      const [monthA, yearA] = a.month.split(' ')
      const [monthB, yearB] = b.month.split(' ')
      return new Date(`${monthA} 20${yearA}`).getTime() - new Date(`${monthB} 20${yearB}`).getTime()
    })

    return {
      totalEstimated,
      totalActual,
      variance: totalActual - totalEstimated,
      byCategory,
      monthlySpending
    }
  }

  const generateReport = async () => {
    setIsGenerating(true)
    try {
      const workOrders: WorkOrder[] = JSON.parse(localStorage.getItem('workOrders') || '[]')
      const properties: Property[] = JSON.parse(localStorage.getItem('properties') || '[]')
      const personnel: Personnel[] = JSON.parse(localStorage.getItem('personnel') || '[]')

      const rangeStart = calculateDateRange()
      
      const data: ReportData = {
        maintenance: generateMaintenanceReport(workOrders, rangeStart),
        property: generatePropertyReport(properties, workOrders, rangeStart),
        personnel: generatePersonnelReport(personnel, workOrders, rangeStart),
        financial: generateFinancialReport(workOrders, rangeStart)
      }

      setReportData(data)

      // Generate CSV based on report type
      let csv = ''
      switch (selectedReport) {
        case 'maintenance':
          csv = 'ID,Title,Status,Priority,Category,Created,Due Date,Estimated Cost,Actual Cost\n'
          csv += data.maintenance.map(wo => 
            `"${wo.id}","${wo.title}","${wo.status}","${wo.priority}","${wo.category}","${wo.createdAt}","${wo.dueDate}","${wo.estimatedCost || 0}","${wo.actualCost || 0}"`
          ).join('\n')
          break

        case 'property':
          csv = 'Property,Address,City,State,Active Tasks,Total Tasks,Last Inspection,Total Cost\n'
          csv += data.property.map(prop => {
            const totalCost = prop.workOrders.reduce((sum, wo) => sum + (wo.actualCost || 0), 0)
            return `"${prop.id}","${prop.address}","${prop.city}","${prop.state}","${prop.maintenanceTasks}","${prop.workOrders.length}","${prop.lastInspection}","${totalCost}"`
          }).join('\n')
          break

        case 'personnel':
          csv = 'Name,Role,Completion Rate,Average Response (hrs),Active Tasks,Completed Tasks,Rating\n'
          csv += data.personnel.map(person => 
            `"${person.firstName} ${person.lastName}","${person.role}","${person.completionRate.toFixed(1)}%","${person.averageResponse.toFixed(1)}","${person.activeWorkOrders}","${person.completedWorkOrders}","${person.rating}"`
          ).join('\n')
          break

        case 'financial':
          const { financial } = data
          csv = 'Category,Estimated Cost,Actual Cost,Variance,Number of Orders\n'
          csv += Object.entries(financial.byCategory).map(([category, data]) =>
            `"${category}","${data.estimated}","${data.actual}","${data.actual - data.estimated}","${data.count}"`
          ).join('\n')
          csv += '\n\nMonthly Summary\nMonth,Amount\n'
          csv += financial.monthlySpending.map(month =>
            `"${month.month}","${month.amount}"`
          ).join('\n')
          break
      }

      // Download CSV
      const blob = new Blob([csv], { type: 'text/csv' })
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${selectedReport}-report-${dateRange}.csv`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      window.URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Error generating report:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Reports</h1>
        <button
          onClick={generateReport}
          disabled={isGenerating}
          className="glass glass-hover px-4 py-2 flex items-center gap-2 bg-blue-500/20"
        >
          {isGenerating ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Download className="w-4 h-4" />
              Export Report
            </>
          )}
        </button>
      </div>

      <div className="flex gap-4 items-center">
        <div className="glass p-2 flex items-center gap-2">
          <Filter className="w-5 h-5 text-gray-400" />
          <select
            value={selectedReport}
            onChange={(e) => setSelectedReport(e.target.value as ReportType)}
            className="bg-transparent border-none outline-none"
          >
            <option value="maintenance">Maintenance Report</option>
            <option value="property">Property Report</option>
            <option value="personnel">Personnel Report</option>
            <option value="financial">Financial Report</option>
          </select>
        </div>

        <div className="glass p-2 flex items-center gap-2">
          <Calendar className="w-5 h-5 text-gray-400" />
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value as DateRange)}
            className="bg-transparent border-none outline-none"
          >
            <option value="7d">Last 7 days</option>
            <option value="30d">Last 30 days</option>
            <option value="90d">Last 90 days</option>
            <option value="1y">Last year</option>
            <option value="all">All time</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-4">
            <FileText className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Report Preview</h2>
          </div>
          
          {reportData && (
            <div className="space-y-4">
              {selectedReport === 'maintenance' && (
                <>
                  <p className="text-gray-400">Total Work Orders: {reportData.maintenance.length}</p>
                  <div className="space-y-2">
                    <p>Status Distribution:</p>
                    {Object.entries(
                      reportData.maintenance.reduce((acc, wo) => {
                        acc[wo.status] = (acc[wo.status] || 0) + 1
                        return acc
                      }, {} as Record<string, number>)
                    ).map(([status, count]) => (
                      <div key={status} className="flex justify-between text-sm">
                        <span className="text-gray-400 capitalize">{status}</span>
                        <span>{count}</span>
                      </div>
                    ))}
                  </div>
                </>
              )}

              {selectedReport === 'property' && (
                <>
                  <p className="text-gray-400">Total Properties: {reportData.property.length}</p>
                  <div className="space-y-2">
                    <p>Maintenance Summary:</p>
                    <div className="text-sm space-y-1">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Active Tasks</span>
                        <span>{reportData.property.reduce((sum, p) => sum + p.maintenanceTasks, 0)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Properties with Tasks</span>
                        <span>{reportData.property.filter(p => p.maintenanceTasks > 0).length}</span>
                      </div>
                    </div>
                  </div>
                </>
              )}

              {selectedReport === 'personnel' && (
                <>
                  <p className="text-gray-400">Total Personnel: {reportData.personnel.length}</p>
                  <div className="space-y-2">
                    <p>Performance Summary:</p>
                    <div className="text-sm space-y-1">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Average Completion Rate</span>
                        <span>
                          {(reportData.personnel.reduce((sum, p) => sum + p.completionRate, 0) / 
                            reportData.personnel.length).toFixed(1)}%
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Average Response Time</span>
                        <span>
                          {(reportData.personnel.reduce((sum, p) => sum + p.averageResponse, 0) / 
                            reportData.personnel.length).toFixed(1)} hrs
                        </span>
                      </div>
                    </div>
                  </div>
                </>
              )}

              {selectedReport === 'financial' && (
                <>
                  <div className="space-y-2">
                    <p>Financial Summary:</p>
                    <div className="text-sm space-y-1">
                      <div className="flex justify-between">
                        <span className="text-gray-400">Total Estimated</span>
                        <span>${reportData.financial.totalEstimated.toFixed(2)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Total Actual</span>
                        <span>${reportData.financial.totalActual.toFixed(2)}</span>
                      </div>
                      <div className="flex justify-between font-medium">
                        <span className="text-gray-400">Variance</span>
                        <span className={reportData.financial.variance > 0 ? 'text-red-400' : 'text-green-400'}>
                          ${Math.abs(reportData.financial.variance).toFixed(2)}
                          {reportData.financial.variance > 0 ? ' over' : ' under'}
                        </span>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}
        </div>

        <div className="glass p-6">
          <h2 className="text-lg font-semibold mb-4">Report Details</h2>
          <div className="space-y-4 text-sm text-gray-400">
            {selectedReport === 'maintenance' && (
              <>
                <p>This report includes:</p>
                <ul className="list-disc list-inside space-y-2">
                  <li>Work order status distribution</li>
                  <li>Priority levels and response times</li>
                  <li>Task completion rates</li>
                  <li>Cost analysis per work order</li>
                </ul>
              </>
            )}
            {selectedReport === 'property' && (
              <>
                <p>This report includes:</p>
                <ul className="list-disc list-inside space-y-2">
                  <li>Property maintenance history</li>
                  <li>Active maintenance tasks</li>
                  <li>Inspection status</li>
                  <li>Cost per property analysis</li>
                </ul>
              </>
            )}
            {selectedReport === 'personnel' && (
              <>
                <p>This report includes:</p>
                <ul className="list-disc list-inside space-y-2">
                  <li>Individual performance metrics</li>
                  <li>Task completion rates</li>
                  <li>Response time analysis</li>
                  <li>Workload distribution</li>
                </ul>
              </>
            )}
            {selectedReport === 'financial' && (
              <>
                <p>This report includes:</p>
                <ul className="list-disc list-inside space-y-2">
                  <li>Cost analysis by category</li>
                  <li>Budget variance analysis</li>
                  <li>Monthly spending trends</li>
                  <li>Cost per maintenance type</li>
                </ul>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default Reports

================
File: src/components/Settings.tsx
================
import { useState, useEffect } from 'react'
import { Save, Moon, Sun, Bell, Shield, Wallet, Globe, Mail } from 'lucide-react'

interface Settings {
  theme: 'dark' | 'light'
  notifications: {
    email: boolean
    push: boolean
    maintenance: boolean
    financial: boolean
  }
  security: {
    twoFactor: boolean
    sessionTimeout: number
  }
  wallet: {
    network: string
    autoConnect: boolean
  }
  display: {
    language: string
    dateFormat: string
    currency: string
  }
}

const DEFAULT_SETTINGS: Settings = {
  theme: 'dark',
  notifications: {
    email: true,
    push: true,
    maintenance: true,
    financial: true,
  },
  security: {
    twoFactor: false,
    sessionTimeout: 30,
  },
  wallet: {
    network: 'ethereum',
    autoConnect: true,
  },
  display: {
    language: 'en',
    dateFormat: 'MM/DD/YYYY',
    currency: 'USD',
  },
}

const Settings = () => {
  const [settings, setSettings] = useState<Settings>(DEFAULT_SETTINGS)
  const [isSaving, setIsSaving] = useState(false)
  const [savedStatus, setSavedStatus] = useState<'saved' | 'error' | null>(null)

  useEffect(() => {
    const savedSettings = localStorage.getItem('settings')
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings))
    }
  }, [])

  const handleSave = async () => {
    setIsSaving(true)
    setSavedStatus(null)
    try {
      localStorage.setItem('settings', JSON.stringify(settings))
      setSavedStatus('saved')
      setTimeout(() => setSavedStatus(null), 3000)
    } catch (error) {
      console.error('Error saving settings:', error)
      setSavedStatus('error')
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Settings</h1>
        <button
          onClick={handleSave}
          disabled={isSaving}
          className="glass glass-hover px-4 py-2 flex items-center gap-2 bg-blue-500/20"
        >
          <Save className="w-4 h-4" />
          {isSaving ? 'Saving...' : 'Save Changes'}
        </button>
      </div>

      {savedStatus === 'saved' && (
        <div className="glass p-4 bg-green-500/20 text-green-400">
          Settings saved successfully
        </div>
      )}

      {savedStatus === 'error' && (
        <div className="glass p-4 bg-red-500/20 text-red-400">
          Error saving settings
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            {settings.theme === 'dark' ? (
              <Moon className="w-5 h-5 text-blue-400" />
            ) : (
              <Sun className="w-5 h-5 text-blue-400" />
            )}
            <h2 className="text-lg font-semibold">Appearance</h2>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Theme</label>
              <div className="flex gap-4">
                <button
                  onClick={() => setSettings(s => ({...s, theme: 'dark'}))}
                  className={`px-4 py-2 rounded-lg ${
                    settings.theme === 'dark' 
                      ? 'glass bg-blue-500/20 ring-2 ring-blue-400/30' 
                      : 'glass glass-hover'
                  }`}
                >
                  Dark
                </button>
                <button
                  onClick={() => setSettings(s => ({...s, theme: 'light'}))}
                  className={`px-4 py-2 rounded-lg ${
                    settings.theme === 'light'
                      ? 'glass bg-blue-500/20 ring-2 ring-blue-400/30'
                      : 'glass glass-hover'
                  }`}
                >
                  Light
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            <Bell className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Notifications</h2>
          </div>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Email Notifications</label>
              <input
                type="checkbox"
                checked={settings.notifications.email}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  notifications: {...s.notifications, email: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Push Notifications</label>
              <input
                type="checkbox"
                checked={settings.notifications.push}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  notifications: {...s.notifications, push: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Maintenance Alerts</label>
              <input
                type="checkbox"
                checked={settings.notifications.maintenance}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  notifications: {...s.notifications, maintenance: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Financial Updates</label>
              <input
                type="checkbox"
                checked={settings.notifications.financial}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  notifications: {...s.notifications, financial: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            <Shield className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Security</h2>
          </div>

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Two-Factor Authentication</label>
              <input
                type="checkbox"
                checked={settings.security.twoFactor}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  security: {...s.security, twoFactor: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">
                Session Timeout (minutes)
              </label>
              <input
                type="number"
                min="5"
                max="120"
                value={settings.security.sessionTimeout}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  security: {...s.security, sessionTimeout: parseInt(e.target.value)}
                }))}
                className="glass p-2 w-full"
              />
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            <Wallet className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Wallet Settings</h2>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Network</label>
              <select
                value={settings.wallet.network}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  wallet: {...s.wallet, network: e.target.value}
                }))}
                className="glass p-2 w-full"
              >
                <option value="ethereum">Ethereum Mainnet</option>
                <option value="goerli">Goerli Testnet</option>
                <option value="polygon">Polygon</option>
              </select>
            </div>
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Auto-connect</label>
              <input
                type="checkbox"
                checked={settings.wallet.autoConnect}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  wallet: {...s.wallet, autoConnect: e.target.checked}
                }))}
                className="w-4 h-4"
              />
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            <Globe className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Display Settings</h2>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Language</label>
              <select
                value={settings.display.language}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  display: {...s.display, language: e.target.value}
                }))}
                className="glass p-2 w-full"
              >
                <option value="en">English</option>
                <option value="es">Español</option>
                <option value="fr">Français</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Date Format</label>
              <select
                value={settings.display.dateFormat}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  display: {...s.display, dateFormat: e.target.value}
                }))}
                className="glass p-2 w-full"
              >
                <option value="MM/DD/YYYY">MM/DD/YYYY</option>
                <option value="DD/MM/YYYY">DD/MM/YYYY</option>
                <option value="YYYY-MM-DD">YYYY-MM-DD</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Currency</label>
              <select
                value={settings.display.currency}
                onChange={(e) => setSettings(s => ({
                  ...s,
                  display: {...s.display, currency: e.target.value}
                }))}
                className="glass p-2 w-full"
              >
                <option value="USD">USD ($)</option>
                <option value="EUR">EUR (€)</option>
                <option value="GBP">GBP (£)</option>
              </select>
            </div>
          </div>
        </div>

        <div className="glass p-6">
          <div className="flex items-center gap-3 mb-6">
            <Mail className="w-5 h-5 text-blue-400" />
            <h2 className="text-lg font-semibold">Email Preferences</h2>
          </div>

          <div className="space-y-4 text-sm text-gray-400">
            <p>Configure your email notification preferences in the notifications section above.</p>
            <p>Email notifications will be sent to your registered email address.</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Settings

================
File: src/components/Sidebar.tsx
================
import { useState } from 'react'
import { NavLink, useNavigate } from 'react-router-dom'
import { 
  LayoutDashboard, 
  Building2, 
  Wrench, 
  BarChart3, 
  FileText, 
  Settings,
  ChevronLeft,
  ChevronRight,
  Users,
  LogOut
} from 'lucide-react'
import { useAuth } from '../contexts/AuthContext'

const Sidebar = () => {
  const [isCollapsed, setIsCollapsed] = useState(false)
  const { logout } = useAuth()
  const navigate = useNavigate()

  const handleLogout = async () => {
    try {
      await logout()
      navigate('/login')
    } catch (error) {
      console.error('Failed to log out:', error)
    }
  }

  return (
    <aside className={`${isCollapsed ? 'w-20' : 'w-64'} glass p-4 m-4 flex flex-col transition-all duration-300`}>
      <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'gap-3 px-4'}`}>
        <div className="w-8 h-8 rounded-lg bg-blue-500 flex items-center justify-center shrink-0">
          <Building2 className="w-5 h-5 text-white" />
        </div>
        {!isCollapsed && <h1 className="text-xl font-bold">BlockFix</h1>}
      </div>

      <nav className="flex flex-col gap-2 mt-8 flex-grow">
        <NavLink to="/" end className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <LayoutDashboard className="w-5 h-5" />
          {!isCollapsed && <span>Dashboard</span>}
        </NavLink>
        <NavLink to="/properties" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <Building2 className="w-5 h-5" />
          {!isCollapsed && <span>Properties</span>}
        </NavLink>
        <NavLink to="/maintenance" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <Wrench className="w-5 h-5" />
          {!isCollapsed && <span>Maintenance</span>}
        </NavLink>
        <NavLink to="/analytics" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <BarChart3 className="w-5 h-5" />
          {!isCollapsed && <span>Analytics</span>}
        </NavLink>
        <NavLink to="/personnel" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <Users className="w-5 h-5" />
          {!isCollapsed && <span>Personnel</span>}
        </NavLink>
        <NavLink to="/reports" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <FileText className="w-5 h-5" />
          {!isCollapsed && <span>Reports</span>}
        </NavLink>
        <NavLink to="/settings" className={({isActive}) => `nav-item ${isActive ? 'active' : ''} ${isCollapsed ? 'justify-center px-2' : ''}`}>
          <Settings className="w-5 h-5" />
          {!isCollapsed && <span>Settings</span>}
        </NavLink>
      </nav>

      <div className="mt-4 flex flex-col gap-2">
        <button 
          onClick={handleLogout}
          className="nav-item justify-center text-red-400 hover:text-red-300"
        >
          <LogOut className="w-5 h-5" />
          {!isCollapsed && <span>Logout</span>}
        </button>

        <button 
          onClick={() => setIsCollapsed(!isCollapsed)}
          className="nav-item justify-center"
        >
          {isCollapsed ? <ChevronRight className="w-5 h-5" /> : <ChevronLeft className="w-5 h-5" />}
        </button>
      </div>
    </aside>
  )
}

export default Sidebar

================
File: src/components/StatCard.tsx
================
import { ReactNode } from 'react'

interface StatCardProps {
  icon: ReactNode
  title: string
  value: string
  change: string
  negative?: boolean
}

const StatCard = ({ icon, title, value, change, negative = false }: StatCardProps) => {
  return (
    <div className="glass glass-hover p-6">
      <div className="flex justify-between items-start">
        <div className="p-2 rounded-lg bg-blue-500/20">
          {icon}
        </div>
        <span className={`px-2 py-1 rounded-full text-sm ${
          negative ? 'bg-red-500/20 text-red-400' : 'bg-green-500/20 text-green-400'
        }`}>
          {change}%
        </span>
      </div>
      <div className="mt-4">
        <h3 className="text-gray-400">{title}</h3>
        <p className="text-2xl font-semibold mt-1">{value}</p>
      </div>
    </div>
  )
}

export default StatCard

================
File: src/contexts/AuthContext.tsx
================
import { createContext, useContext, useEffect, useState, ReactNode } from 'react'
import { 
  User,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged
} from 'firebase/auth'
import { auth } from '../lib/firebase'

interface AuthContextType {
  currentUser: User | null
  signup: (email: string, password: string) => Promise<void>
  login: (email: string, password: string) => Promise<void>
  logout: () => Promise<void>
  loading: boolean
}

const AuthContext = createContext<AuthContextType | null>(null)

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user)
      setLoading(false)
    })

    return unsubscribe
  }, [])

  const signup = async (email: string, password: string) => {
    await createUserWithEmailAndPassword(auth, email, password)
  }

  const login = async (email: string, password: string) => {
    await signInWithEmailAndPassword(auth, email, password)
  }

  const logout = async () => {
    await signOut(auth)
  }

  const value = {
    currentUser,
    signup,
    login,
    logout,
    loading
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}

================
File: src/lib/firebase.ts
================
import { initializeApp } from 'firebase/app'
import { getAuth, connectAuthEmulator } from 'firebase/auth'

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
}

const app = initializeApp(firebaseConfig)
export const auth = getAuth(app)

// Enable Firebase Auth emulator in development
if (import.meta.env.DEV) {
  connectAuthEmulator(auth, 'http://127.0.0.1:9099')
}

================
File: src/middleware/auth.ts
================
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useEffect } from 'react';

export const withAuth = (WrappedComponent: React.ComponentType<any>) => {
  return function WithAuthComponent(props: any) {
    const { currentUser, loading } = useAuth();
    const navigate = useNavigate();

    useEffect(() => {
      if (!loading && !currentUser) {
        navigate('/login');
      }
    }, [currentUser, loading, navigate]);

    if (loading) {
      return <div>Loading...</div>;
    }

    return currentUser ? <WrappedComponent {...props} /> : null;
  };
};

export const checkAuth = () => {
  const { currentUser } = useAuth();
  return !!currentUser;
};

================
File: src/middleware/error.ts
================
export class ApiError extends Error {
  constructor(
    public statusCode: number,
    message: string
  ) {
    super(message)
    this.name = 'ApiError'
  }
}

export const handleError = (error: unknown): { message: string; status: number } => {
  if (error instanceof ApiError) {
    return {
      message: error.message,
      status: error.statusCode
    }
  }

  if (error instanceof Error) {
    return {
      message: error.message,
      status: 500
    }
  }

  return {
    message: 'An unknown error occurred',
    status: 500
  }
}

================
File: src/middleware/validation.ts
================
import { ApiError } from './error'
import { z } from 'zod'

export const validateRequest = <T>(schema: z.ZodSchema<T>, data: unknown): T => {
  try {
    return schema.parse(data)
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new ApiError(400, error.errors[0].message)
    }
    throw error
  }
}

// Common validation schemas
export const schemas = {
  property: z.object({
    address: z.string().min(1, 'Address is required'),
    unit: z.string().optional(),
    city: z.string().min(1, 'City is required'),
    state: z.string().min(1, 'State is required'),
    zipCode: z.string().min(1, 'ZIP code is required'),
  }),

  workOrder: z.object({
    propertyId: z.string().min(1, 'Property ID is required'),
    title: z.string().min(1, 'Title is required'),
    description: z.string().min(1, 'Description is required'),
    priority: z.enum(['low', 'medium', 'high', 'urgent']),
    dueDate: z.string().min(1, 'Due date is required'),
    category: z.string().min(1, 'Category is required'),
    estimatedCost: z.number().optional(),
    assignedTo: z.string().optional(),
  }),

  personnel: z.object({
    firstName: z.string().min(1, 'First name is required'),
    lastName: z.string().min(1, 'Last name is required'),
    role: z.enum(['employee', 'contractor']),
    email: z.string().email('Invalid email address'),
    phone: z.string().min(1, 'Phone number is required'),
    specialties: z.array(z.string()).min(1, 'At least one specialty is required'),
    rate: z.number().min(0, 'Rate must be non-negative'),
  }),
}

================
File: src/types/personnel.ts
================
export type PersonnelRole = 'employee' | 'contractor'
export type PersonnelSpecialty = 'HVAC' | 'Plumbing' | 'Electrical' | 'General Maintenance' | 'Landscaping' | 'Cleaning' | 'Carpentry'
export type PersonnelStatus = 'active' | 'inactive' | 'on-leave'

export interface Personnel {
  id: string
  firstName: string
  lastName: string
  role: PersonnelRole
  email: string
  phone: string
  specialties: PersonnelSpecialty[]
  rate: number
  status: PersonnelStatus
  hireDate: string
  activeWorkOrders: number
  completedWorkOrders: number
  rating: number
  availability: 'available' | 'busy' | 'unavailable'
  license?: string
  insurance?: {
    provider: string
    policyNumber: string
    expirationDate: string
  }
}

export interface PersonnelFormData {
  firstName: string
  lastName: string
  role: PersonnelRole
  email: string
  phone: string
  specialties: PersonnelSpecialty[]
  rate: number
  license?: string
  insurance?: {
    provider: string
    policyNumber: string
    expirationDate: string
  }
}

================
File: src/types/property.ts
================
export interface Property {
  id: string
  address: string
  unit?: string
  city: string
  state: string
  zipCode: string
  maintenanceTasks: number
  warranties: number
  lastInspection: string
  status: 'active' | 'inactive'
  contractAddress?: string
  owner: {
    name: string
    email: string
    phone: string
    wallet: string
  }
  maintenanceHistory: MaintenanceRecord[]
}

export interface MaintenanceRecord {
  id: string
  date: string
  type: string
  description: string
  cost: number
  status: 'completed' | 'pending' | 'in-progress'
  contractor: string
}

export interface PropertyFormData {
  address: string
  unit?: string
  city: string
  state: string
  zipCode: string
}

================
File: src/types/workOrder.ts
================
export type WorkOrderPriority = 'low' | 'medium' | 'high' | 'urgent'
export type WorkOrderStatus = 'pending' | 'in-progress' | 'completed' | 'cancelled'

export interface WorkOrder {
  id: string
  propertyId: string
  title: string
  description: string
  priority: WorkOrderPriority
  status: WorkOrderStatus
  createdAt: string
  dueDate: string
  assignedTo?: string
  estimatedCost?: number
  actualCost?: number
  category: string
  notes: WorkOrderNote[]
  attachments: WorkOrderAttachment[]
}

export interface WorkOrderNote {
  id: string
  content: string
  createdAt: string
  createdBy: string
}

export interface WorkOrderAttachment {
  id: string
  name: string
  url: string
  type: string
  uploadedAt: string
}

export interface WorkOrderFormData {
  propertyId: string
  title: string
  description: string
  priority: WorkOrderPriority
  dueDate: string
  assignedTo?: string
  estimatedCost?: number
  category: string
}

================
File: src/App.tsx
================
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { AuthProvider, useAuth } from './contexts/AuthContext'
import Sidebar from './components/Sidebar'
import Dashboard from './components/Dashboard'
import Properties from './components/Properties'
import Maintenance from './components/Maintenance'
import Analytics from './components/Analytics'
import PersonnelPage from './components/Personnel'
import Reports from './components/Reports'
import Settings from './components/Settings'
import LoginForm from './components/auth/LoginForm'
import SignupForm from './components/auth/SignupForm'
import MaintenanceMode from './components/MaintenanceMode'

const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
  const { currentUser, loading } = useAuth()

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Loading...</div>
  }

  if (!currentUser) {
    return <Navigate to="/login" />
  }

  return (
    <div className="flex min-h-screen">
      <Sidebar />
      <main className="flex-1 p-8 overflow-auto transition-all duration-300">
        {children}
      </main>
    </div>
  )
}

function App() {
  // Check for maintenance mode
  if (import.meta.env.VITE_MAINTENANCE_MODE === 'true') {
    return <MaintenanceMode />
  }

  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<LoginForm />} />
          <Route path="/signup" element={<SignupForm />} />
          <Route path="/" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
          <Route path="/properties" element={<ProtectedRoute><Properties /></ProtectedRoute>} />
          <Route path="/maintenance" element={<ProtectedRoute><Maintenance /></ProtectedRoute>} />
          <Route path="/analytics" element={<ProtectedRoute><Analytics /></ProtectedRoute>} />
          <Route path="/personnel" element={<ProtectedRoute><PersonnelPage /></ProtectedRoute>} />
          <Route path="/reports" element={<ProtectedRoute><Reports /></ProtectedRoute>} />
          <Route path="/settings" element={<ProtectedRoute><Settings /></ProtectedRoute>} />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </Router>
    </AuthProvider>
  )
}

export default App

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
}

body {
  @apply bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white;
  min-height: 100vh;
}

.glass {
  @apply bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl;
}

.glass-hover {
  @apply transition-all duration-300 hover:bg-white/15 hover:border-white/30;
}

.nav-item {
  @apply flex items-center gap-3 px-4 py-3 rounded-lg text-gray-300 hover:text-white hover:bg-white/10 transition-all cursor-pointer;
}

.nav-item.active {
  @apply bg-white/15 text-white;
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import ErrorBoundary from './components/ErrorBoundary'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </StrictMode>,
)

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_FIREBASE_API_KEY: string
  readonly VITE_FIREBASE_AUTH_DOMAIN: string
  readonly VITE_FIREBASE_PROJECT_ID: string
  readonly VITE_FIREBASE_STORAGE_BUCKET: string
  readonly VITE_FIREBASE_MESSAGING_SENDER_ID: string
  readonly VITE_FIREBASE_APP_ID: string
  readonly VITE_APP_NAME: string
  readonly VITE_APP_URL: string
  readonly VITE_ENABLE_ANALYTICS: string
  readonly VITE_MAINTENANCE_MODE: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="BlockFix - Professional property management and maintenance platform" />
    <meta name="theme-color" content="#0f172a" />
    <meta name="robots" content="index, follow" />
    <meta property="og:title" content="BlockFix - Property Management Platform" />
    <meta property="og:description" content="Professional property management and maintenance platform" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="%VITE_APP_URL%" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <title>BlockFix - Property Management Platform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: netlify.toml
================
[build]
  command = "npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

================
File: package.json
================
{
  "name": "My new app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "ethers": "^6.13.4",
    "lucide-react": "^0.453.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.22.3",
    "recharts": "^2.13.3",
    "repomix": "^0.2.5"
  },
  "devDependencies": {
    "@types/react": "^18.3.6",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.5.3",
    "vite": "^5.4.6"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# BlockFix

A professional property management and maintenance platform.

## Deployment

This project is configured for deployment on Netlify.

### Deploy with Netlify

1. Fork or clone this repository
2. Create a new site in Netlify
3. Connect to your repository
4. Configure the following environment variables in Netlify's dashboard:
   - `VITE_FIREBASE_API_KEY`
   - `VITE_FIREBASE_AUTH_DOMAIN`
   - `VITE_FIREBASE_PROJECT_ID`
   - `VITE_FIREBASE_STORAGE_BUCKET`
   - `VITE_FIREBASE_MESSAGING_SENDER_ID`
   - `VITE_FIREBASE_APP_ID`
   - `VITE_APP_NAME`
   - `VITE_APP_URL`
   - `VITE_ENABLE_ANALYTICS`
   - `VITE_MAINTENANCE_MODE`

5. Deploy! Netlify will automatically detect the build settings from netlify.toml

### Development

1. Install dependencies:
```bash
npm install
```

2. Copy `.env.example` to `.env` and fill in your values:
```bash
cp .env.example .env
```

3. Start development server:
```bash
npm run dev
```

4. Build for production:
```bash
npm run build
```

## Features

- Property Management
- Maintenance Work Orders
- Personnel Management
- Analytics Dashboard
- Financial Reporting
- Smart Contract Integration

## Tech Stack

- React
- TypeScript
- Tailwind CSS
- Firebase Authentication
- Ethers.js
- Vite

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.svg', 'apple-touch-icon.png', 'robots.txt'],
      manifest: {
        name: 'BlockFix',
        short_name: 'BlockFix',
        description: 'Professional property management and maintenance platform',
        theme_color: '#0f172a',
        background_color: '#0f172a',
        display: 'standalone',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      }
    })
  ],
  build: {
    sourcemap: false,
    rollupOptions: {
      output: {
        manualChunks: {
          'react-vendor': ['react', 'react-dom', 'react-router-dom'],
          'firebase-vendor': ['firebase/app', 'firebase/auth'],
          'ui-vendor': ['@headlessui/react', 'lucide-react'],
          'chart-vendor': ['recharts']
        }
      }
    },
    target: 'esnext',
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true,
      },
    }
  },
  server: {
    headers: {
      'X-Frame-Options': 'DENY',
      'X-Content-Type-Options': 'nosniff',
      'Referrer-Policy': 'strict-origin-when-cross-origin',
      'Permissions-Policy': 'camera=(), microphone=(), geolocation=()'
    }
  }
})
